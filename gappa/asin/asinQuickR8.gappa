# The polynomial to implement is: 33903941391411436062548621898578847b-115 + (x * (118439326888551330576771230425869b-106 + (x * (1276087168563161b-50 + (x * (2565255893858397b-50 + (x * (5885467043083027b-50 + (x * (7627068437138929b-49 + (x * (5277247200778677b-47 + (x * (3823843648895481b-45 + (x * (5727900287195667b-44 + (x * (549830323588319b-39 + (x * (6890204176375445b-41 + (x * (5570398459840501b-39 + (x * 1124915619397507b-35)))))))))))))))))))))))
# The polynomial implemented is: 33903941391411436062548621898578847b-115 + (x * (118439326888551330576771230425869b-106 + (x * (1276087168563161b-50 + (x * (2565255893858397b-50 + (x * (5885467043083027b-50 + (x * (7627068437138929b-49 + (x * (5277247200778677b-47 + (x * (3823843648895481b-45 + (x * (5727900287195667b-44 + (x * (549830323588319b-39 + (x * (6890204176375445b-41 + (x * (5570398459840501b-39 + (x * 1124915619397507b-35)))))))))))))))))))))))
# The domain is [-96586942132361b-52;6036683883289b-48]
# The free variable x is a double precision number, the result p_res* is stored on a double-double number.
# The code produces 37 intermediate and final arithmetical approximations.

# Double precision rounding operator:
@double = float<ieee_64,ne>;

# Disable some annoying warnings:
#@-Wno-dichotomy-failure

# Helper definitions for decomposing the free variable
xh = x;

# Transcription of the C code
p_coeff_0h = double(8.16207699480864135033186812506755813956260681152343750000000000000000000000000000e-01);
p_coeff_0m = double(1.13998759014226814082709277093003596330685011160153518976201336698750310461036861e-20);
p_coeff_0hm = p_coeff_0h + p_coeff_0m;

p_coeff_1h = double(1.45987741598546749699494284868706017732620239257812500000000000000000000000000000e+00);
p_coeff_1m = double(1.00585284375539824516783136958955684505754068277117579954804682529356796294450760e-16);
p_coeff_1hm = p_coeff_1h + p_coeff_1m;

p_coeff_2h = double(1.13339308477403566399743795045651495456695556640625000000000000000000000000000000e+00);

p_coeff_3h = double(2.27840492593358323603069948148913681507110595703125000000000000000000000000000000e+00);

p_coeff_4h = double(5.22734481752265178755578745040111243724822998046875000000000000000000000000000000e+00);

p_coeff_5h = double(1.35483951828855158083797505241818726062774658203125000000000000000000000000000000e+01);

p_coeff_6h = double(3.74970966332361186346133763436228036880493164062500000000000000000000000000000000e+01);

p_coeff_7h = double(1.08680173096203162685924326069653034210205078125000000000000000000000000000000000e+02);

p_coeff_8h = double(3.25593435218005822662235004827380180358886718750000000000000000000000000000000000e+02);

p_coeff_9h = double(1.00013553235534163832198828458786010742187500000000000000000000000000000000000000e+03);

p_coeff_10h = double(3.13330209627358499346883036196231842041015625000000000000000000000000000000000000e+03);

p_coeff_11h = double(1.01324957719780304614687338471412658691406250000000000000000000000000000000000000e+04);

p_coeff_12h = double(3.27393534650766232516616582870483398437500000000000000000000000000000000000000000e+04);

p_t_1_0h = p_coeff_12h;

p_t_2_0h = double(p_t_1_0h * xh);
p_t_3_0h = double(p_coeff_11h + p_t_2_0h);
p_t_4_0h = double(p_t_3_0h * xh);
p_t_5_0h = double(p_coeff_10h + p_t_4_0h);
p_t_6_0h = double(p_t_5_0h * xh);
p_t_7_0h = double(p_coeff_9h + p_t_6_0h);
p_t_8_0h = double(p_t_7_0h * xh);
p_t_9_0h = double(p_coeff_8h + p_t_8_0h);
p_t_10_0h = double(p_t_9_0h * xh);
p_t_11_0h = double(p_coeff_7h + p_t_10_0h);
p_t_12_0h = double(p_t_11_0h * xh);
p_t_13_0h = double(p_coeff_6h + p_t_12_0h);
p_t_14_0h = double(p_t_13_0h * xh);
p_t_15_0h = double(p_coeff_5h + p_t_14_0h);
p_t_16_0h = double(p_t_15_0h * xh);
p_t_17_0h = double(p_coeff_4h + p_t_16_0h);
p_t_18_0h = double(p_t_17_0h * xh);
p_t_19_0h = double(p_coeff_3h + p_t_18_0h);
p_t_20_0h = double(p_t_19_0h * xh);
p_t_21_0hm = p_coeff_2h + p_t_20_0h;
p_t_21_0h = double(p_t_21_0hm);
p_t_21_0m = p_t_21_0hm - p_t_21_0h;

p_t_22_0hm = fma_rel<100>(p_t_21_0hm,xh,p_coeff_1hm);
p_t_22_0h = double(p_t_22_0hm);
p_t_22_0m = p_t_22_0hm - p_t_22_0h;

p_t_23_0hm = fma_rel<100>(p_t_22_0hm,xh,p_coeff_0hm);
p_t_23_0h = double(p_t_23_0hm);
p_t_23_0m = p_t_23_0hm - p_t_23_0h;

p_reshm = p_t_23_0hm;
p_resh = p_t_23_0h;
p_resm = p_t_23_0m;


# Mathematical equivalents
Mx = x;
Mp_coeff_0 = p_coeff_0hm;
Mp_coeff_1 = p_coeff_1hm;
Mp_coeff_2 = p_coeff_2h;
Mp_coeff_3 = p_coeff_3h;
Mp_coeff_4 = p_coeff_4h;
Mp_coeff_5 = p_coeff_5h;
Mp_coeff_6 = p_coeff_6h;
Mp_coeff_7 = p_coeff_7h;
Mp_coeff_8 = p_coeff_8h;
Mp_coeff_9 = p_coeff_9h;
Mp_coeff_10 = p_coeff_10h;
Mp_coeff_11 = p_coeff_11h;
Mp_coeff_12 = p_coeff_12h;
Mp_t_1_0 = Mp_coeff_12;
Mp_t_2_0 = Mp_t_1_0 * Mx;
Mp_t_3_0 = Mp_coeff_11 + Mp_t_2_0;
Mp_t_4_0 = Mp_t_3_0 * Mx;
Mp_t_5_0 = Mp_coeff_10 + Mp_t_4_0;
Mp_t_6_0 = Mp_t_5_0 * Mx;
Mp_t_7_0 = Mp_coeff_9 + Mp_t_6_0;
Mp_t_8_0 = Mp_t_7_0 * Mx;
Mp_t_9_0 = Mp_coeff_8 + Mp_t_8_0;
Mp_t_10_0 = Mp_t_9_0 * Mx;
Mp_t_11_0 = Mp_coeff_7 + Mp_t_10_0;
Mp_t_12_0 = Mp_t_11_0 * Mx;
Mp_t_13_0 = Mp_coeff_6 + Mp_t_12_0;
Mp_t_14_0 = Mp_t_13_0 * Mx;
Mp_t_15_0 = Mp_coeff_5 + Mp_t_14_0;
Mp_t_16_0 = Mp_t_15_0 * Mx;
Mp_t_17_0 = Mp_coeff_4 + Mp_t_16_0;
Mp_t_18_0 = Mp_t_17_0 * Mx;
Mp_t_19_0 = Mp_coeff_3 + Mp_t_18_0;
Mp_t_20_0 = Mp_t_19_0 * Mx;
Mp_t_21_0 = Mp_coeff_2 + Mp_t_20_0;
Mp_t_22_0 = (Mp_t_21_0 * Mx) + Mp_coeff_1;
Mp_t_23_0 = (Mp_t_22_0 * Mx) + Mp_coeff_0;
Mp_res = Mp_t_23_0;

# Definition of the relative arithmetical error
epsilon = (p_reshm - Mp_res) / Mp_res;

# Implication to prove
{((
   x in [-96586942132361b-52,-96586942132361b-452]
) \/ (
   x in [6036683883289b-448,6036683883289b-48]
))
->
(
   epsilon in ?
)}

# Hints and Meta-Hints for expansion decomposition

p_t_21_0h ~ p_t_21_0hm;
p_t_22_0h ~ p_t_22_0hm;
p_t_23_0h ~ p_t_23_0hm;

# Meta-Hints for Horner scheme
p_t_1_0h ~ Mp_t_1_0;
p_t_2_0h ~ Mp_t_2_0;
p_t_3_0h ~ Mp_t_3_0;
p_t_4_0h ~ Mp_t_4_0;
p_t_5_0h ~ Mp_t_5_0;
p_t_6_0h ~ Mp_t_6_0;
p_t_7_0h ~ Mp_t_7_0;
p_t_8_0h ~ Mp_t_8_0;
p_t_9_0h ~ Mp_t_9_0;
p_t_10_0h ~ Mp_t_10_0;
p_t_11_0h ~ Mp_t_11_0;
p_t_12_0h ~ Mp_t_12_0;
p_t_13_0h ~ Mp_t_13_0;
p_t_14_0h ~ Mp_t_14_0;
p_t_15_0h ~ Mp_t_15_0;
p_t_16_0h ~ Mp_t_16_0;
p_t_17_0h ~ Mp_t_17_0;
p_t_18_0h ~ Mp_t_18_0;
p_t_19_0h ~ Mp_t_19_0;
p_t_20_0h ~ Mp_t_20_0;
p_t_21_0hm ~ Mp_t_21_0;
p_t_22_0hm ~ Mp_t_22_0;
p_t_23_0hm ~ Mp_t_23_0;
p_reshm ~ Mp_res;

# Dichotomies for triple-double decomposition

# Dichotomy for the error bound
epsilon $ xhm;

