# The polynomial to implement is: 537273513210223274716288889248434731b-120 + (x * (88240263986999722252297847012357b-106 + (x * (20526577571859871112569155652563b-106 + (x * (107789892750625855992013313785105b-108 + (x * (95062093602682177187811187465689b-108 + (x * (477193384067815679840324642654849b-110 + (x * (572921965627724688446677452418063b-110 + (x * (188719174585036872257517150346289b-108 + (x * (15724977217398503074240774828841b-104 + (x * (4815943101116825b-52 + (x * (3373125240821569b-51 + (x * (4808226395402763b-51 + (x * (3468851253814359b-50 + (x * (5061210136901323b-50 + (x * (7451575477138987b-50 + (x * (5529276895184587b-49 + (x * (8262038822452853b-49 + (x * (6210057040978841b-48 + (x * (4692590307258443b-47 + (x * (3562757466383109b-46 + (x * (2717503836213503b-45 + (x * (8416477620649297b-46 + (x * 396224776159005b-41)))))))))))))))))))))))))))))))))))))))))))
# The polynomial implemented is: 537273513210223274716288889248434731b-120 + (x * (88240263986999722252297847012357b-106 + (x * (20526577571859871112569155652563b-106 + (x * (107789892750625855992013313785105b-108 + (x * (95062093602682177187811187465689b-108 + (x * (477193384067815679840324642654849b-110 + (x * (572921965627724688446677452418063b-110 + (x * (188719174585036872257517150346289b-108 + (x * (15724977217398503074240774828841b-104 + (x * (4815943101116825b-52 + (x * (3373125240821569b-51 + (x * (4808226395402763b-51 + (x * (3468851253814359b-50 + (x * (5061210136901323b-50 + (x * (7451575477138987b-50 + (x * (5529276895184587b-49 + (x * (8262038822452853b-49 + (x * (6210057040978841b-48 + (x * (4692590307258443b-47 + (x * (3562757466383109b-46 + (x * (2717503836213503b-45 + (x * (8416477620649297b-46 + (x * 396224776159005b-41)))))))))))))))))))))))))))))))))))))))))))
# The domain is [-715705849514187b-54;178926462378499b-52]
# The free variable x is a double precision number, the result p_res* is stored on a triple-double number.
# The code produces 63 intermediate and final arithmetical approximations.

# Double precision rounding operator:
@double = float<ieee_64,ne>;

# Disable some annoying warnings:
#@-Wno-dichotomy-failure

# Helper definitions for decomposing the free variable
xh = x;

# Transcription of the C code
p_coeff_0h = double(4.04199666960039116769820566332782618701457977294921875000000000000000000000000000e-01);
p_coeff_0m = double(-6.46825370068901234687011200856515476665908008275043725957432344531028434175823350e-21);
p_coeff_0hm = p_coeff_0h + p_coeff_0m;

p_coeff_1h = double(1.08764522696446319649510314775398001074790954589843750000000000000000000000000000e+00);
p_coeff_1m = double(7.20122509204450857334003577729908463703780203035882678808121681868215091526508331e-17);
p_coeff_1hm = p_coeff_1h + p_coeff_1m;

p_coeff_2h = double(2.53009602569167157959384439891437068581581115722656250000000000000000000000000000e-01);
p_coeff_2m = double(-2.62855515233500204494953653812414612827096270443634484781370019845780916512012482e-17);
p_coeff_2hm = p_coeff_2h + p_coeff_2m;

p_coeff_3h = double(3.32153251441150376699340540653793141245841979980468750000000000000000000000000000e-01);
p_coeff_3m = double(-2.17141385535786665092496720426544052591009587195721927677105611564911669120192528e-17);
p_coeff_3hm = p_coeff_3h + p_coeff_3m;

p_coeff_4h = double(2.92932692232876656923679092869861051440238952636718750000000000000000000000000000e-01);
p_coeff_4m = double(-2.54506532782342113657805222827712812531223364242776927013345300565561046823859215e-17);
p_coeff_4hm = p_coeff_4h + p_coeff_4m;

p_coeff_5h = double(3.67616411055874059421455513074761256575584411621093750000000000000000000000000000e-01);
p_coeff_5m = double(-6.76970835849273256879417289105284614692988316998734608931354017613557516597211361e-18);
p_coeff_5hm = p_coeff_5h + p_coeff_5m;

p_coeff_6h = double(4.41363027759851866971274603201891295611858367919921875000000000000000000000000000e-01);
p_coeff_6m = double(-2.90651996480231385490406350336172813253854649135862232844917940610685036517679691e-18);
p_coeff_6hm = p_coeff_6h + p_coeff_6m;

p_coeff_7h = double(5.81535855061384165942683921457501128315925598144531250000000000000000000000000000e-01);
p_coeff_7m = double(2.15506151894707480118506866417280461854749969158187919426872269923478597775101662e-17);
p_coeff_7hm = p_coeff_7h + p_coeff_7m;

p_coeff_8h = double(7.75301235143548206352193119528237730264663696289062500000000000000000000000000000e-01);
p_coeff_8m = double(-5.09980429509694427469186543286592667631136122693286116813737862685229629278182983e-17);
p_coeff_8hm = p_coeff_8h + p_coeff_8m;

p_coeff_9h = double(1.06935418322891551135001009242841973900794982910156250000000000000000000000000000e+00);

p_coeff_10h = double(1.49796852292175275422891900234390050172805786132812500000000000000000000000000000e+00);

p_coeff_11h = double(2.13528146071462776589555687678512185811996459960937500000000000000000000000000000e+00);

p_coeff_12h = double(3.08095882478763538614430217421613633632659912109375000000000000000000000000000000e+00);

p_coeff_13h = double(4.49525762116327154416239864076487720012664794921875000000000000000000000000000000e+00);

p_coeff_14h = double(6.61832853156151212914437564904801547527313232421875000000000000000000000000000000e+00);

p_coeff_15h = double(9.82196882969892293147040618350729346275329589843750000000000000000000000000000000e+00);

p_coeff_16h = double(1.46763291696545170594845330924727022647857666015625000000000000000000000000000000e+01);

p_coeff_17h = double(2.20625545956168913619421800831332802772521972656250000000000000000000000000000000e+01);

p_coeff_18h = double(3.33428595472074320582578366156667470932006835937500000000000000000000000000000000e+01);

p_coeff_19h = double(5.06298287402715487814930384047329425811767578125000000000000000000000000000000000e+01);

p_coeff_20h = double(7.72361044088683854624832747504115104675292968750000000000000000000000000000000000e+01);

p_coeff_21h = double(1.19605340680796203400859667453914880752563476562500000000000000000000000000000000e+02);

p_coeff_22h = double(1.80182167313889749493682757019996643066406250000000000000000000000000000000000000e+02);

p_t_1_0h = p_coeff_22h;

p_t_2_0h = double(p_t_1_0h * xh);
p_t_3_0h = double(p_coeff_21h + p_t_2_0h);
p_t_4_0h = double(p_t_3_0h * xh);
p_t_5_0h = double(p_coeff_20h + p_t_4_0h);
p_t_6_0h = double(p_t_5_0h * xh);
p_t_7_0h = double(p_coeff_19h + p_t_6_0h);
p_t_8_0h = double(p_t_7_0h * xh);
p_t_9_0h = double(p_coeff_18h + p_t_8_0h);
p_t_10_0h = double(p_t_9_0h * xh);
p_t_11_0h = double(p_coeff_17h + p_t_10_0h);
p_t_12_0h = double(p_t_11_0h * xh);
p_t_13_0h = double(p_coeff_16h + p_t_12_0h);
p_t_14_0h = double(p_t_13_0h * xh);
p_t_15_0h = double(p_coeff_15h + p_t_14_0h);
p_t_16_0h = double(p_t_15_0h * xh);
p_t_17_0hm = p_coeff_14h + p_t_16_0h;
p_t_17_0h = double(p_t_17_0hm);
p_t_17_0m = p_t_17_0hm - p_t_17_0h;

p_t_18_0hm = mul_rel<102>(xh,p_t_17_0hm);
p_t_18_0h = double(p_t_18_0hm);
p_t_18_0m = p_t_18_0hm - p_t_18_0h;

p_t_19_0hm = add_rel<102>(p_coeff_13h,p_t_18_0hm);
p_t_19_0h = double(p_t_19_0hm);
p_t_19_0m = p_t_19_0hm - p_t_19_0h;

p_t_20_0hm = mul_rel<102>(xh,p_t_19_0hm);
p_t_20_0h = double(p_t_20_0hm);
p_t_20_0m = p_t_20_0hm - p_t_20_0h;

p_t_21_0hm = add_rel<102>(p_coeff_12h,p_t_20_0hm);
p_t_21_0h = double(p_t_21_0hm);
p_t_21_0m = p_t_21_0hm - p_t_21_0h;

p_t_22_0hm = mul_rel<102>(xh,p_t_21_0hm);
p_t_22_0h = double(p_t_22_0hm);
p_t_22_0m = p_t_22_0hm - p_t_22_0h;

p_t_23_0hm = add_rel<102>(p_coeff_11h,p_t_22_0hm);
p_t_23_0h = double(p_t_23_0hm);
p_t_23_0m = p_t_23_0hm - p_t_23_0h;

p_t_24_0hm = mul_rel<102>(xh,p_t_23_0hm);
p_t_24_0h = double(p_t_24_0hm);
p_t_24_0m = p_t_24_0hm - p_t_24_0h;

p_t_25_0hm = add_rel<102>(p_coeff_10h,p_t_24_0hm);
p_t_25_0h = double(p_t_25_0hm);
p_t_25_0m = p_t_25_0hm - p_t_25_0h;

p_t_26_0hm = mul_rel<102>(xh,p_t_25_0hm);
p_t_26_0h = double(p_t_26_0hm);
p_t_26_0m = p_t_26_0hm - p_t_26_0h;

p_t_27_0hm = add_rel<102>(p_coeff_9h,p_t_26_0hm);
p_t_27_0h = double(p_t_27_0hm);
p_t_27_0m = p_t_27_0hm - p_t_27_0h;

p_t_28_0hm = fma_rel<100>(p_t_27_0hm,xh,p_coeff_8hm);
p_t_28_0h = double(p_t_28_0hm);
p_t_28_0m = p_t_28_0hm - p_t_28_0h;

p_t_29_0hm = fma_rel<100>(p_t_28_0hm,xh,p_coeff_7hm);
p_t_29_0h = double(p_t_29_0hm);
p_t_29_0m = p_t_29_0hm - p_t_29_0h;

p_t_30_0hm = fma_rel<100>(p_t_29_0hm,xh,p_coeff_6hm);
p_t_30_0h = double(p_t_30_0hm);
p_t_30_0m = p_t_30_0hm - p_t_30_0h;

p_t_31_0hm = fma_rel<100>(p_t_30_0hm,xh,p_coeff_5hm);
p_t_31_0h = double(p_t_31_0hm);
p_t_31_0m = p_t_31_0hm - p_t_31_0h;

p_t_32_0hm = fma_rel<100>(p_t_31_0hm,xh,p_coeff_4hm);
p_t_32_0h = double(p_t_32_0hm);
p_t_32_0m = p_t_32_0hm - p_t_32_0h;

p_t_33_0hm = fma_rel<100>(p_t_32_0hm,xh,p_coeff_3hm);
p_t_33_0h = double(p_t_33_0hm);
p_t_33_0m = p_t_33_0hm - p_t_33_0h;

p_t_34_0hm = mul_rel<102>(xh,p_t_33_0hm);
p_t_34_0h = double(p_t_34_0hm);
p_t_34_0m = p_t_34_0hm - p_t_34_0h;

p_t_35_0hml = add_rel<140>(p_coeff_2hm,p_t_34_0hm);
p_t_35_0ml = p_t_35_0hml - p_t_35_0h;
p_t_35_0m = double(p_t_35_0ml);
p_t_35_0l = p_t_35_0ml - p_t_35_0m;
p_t_35_0hm = p_t_35_0h + p_t_35_0m;
overlap_p_t_35_0 = p_t_35_0m / p_t_35_0h;

p_t_36_0hml = mul_rel<145>(xh,p_t_35_0hml);
p_t_36_0ml = p_t_36_0hml - p_t_36_0h;
p_t_36_0m = double(p_t_36_0ml);
p_t_36_0l = p_t_36_0ml - p_t_36_0m;
p_t_36_0hm = p_t_36_0h + p_t_36_0m;
overlap_p_t_36_0 = p_t_36_0m / p_t_36_0h;

p_t_37_0hml = add_rel<143>(p_coeff_1hm,p_t_36_0hml);
p_t_37_0ml = p_t_37_0hml - p_t_37_0h;
p_t_37_0m = double(p_t_37_0ml);
p_t_37_0l = p_t_37_0ml - p_t_37_0m;
p_t_37_0hm = p_t_37_0h + p_t_37_0m;
overlap_p_t_37_0 = p_t_37_0m / p_t_37_0h;

p_t_38_0hml = mul_rel<135>(xh,p_t_37_0hml);
p_t_38_0ml = p_t_38_0hml - p_t_38_0h;
p_t_38_0m = double(p_t_38_0ml);
p_t_38_0l = p_t_38_0ml - p_t_38_0m;
p_t_38_0hm = p_t_38_0h + p_t_38_0m;
overlap_p_t_38_0 = p_t_38_0m / p_t_38_0h;

p_t_39_0hml = add_rel<133>(p_coeff_0hm,p_t_38_0hml);
p_t_39_0ml = p_t_39_0hml - p_t_39_0h;
p_t_39_0m = double(p_t_39_0ml);
p_t_39_0l = p_t_39_0ml - p_t_39_0m;
p_t_39_0hm = p_t_39_0h + p_t_39_0m;
overlap_p_t_39_0 = p_t_39_0m / p_t_39_0h;

p_reshml = p_t_39_0hml;
p_resml = p_reshml - p_resh;
p_resm = double(p_resml);
p_resl = p_resml - p_resm;
p_reshm = p_resh + p_resm;
overlap_p_res = p_resm / p_resh;


# Mathematical equivalents
Mx = x;
Mp_coeff_0 = p_coeff_0hm;
Mp_coeff_1 = p_coeff_1hm;
Mp_coeff_2 = p_coeff_2hm;
Mp_coeff_3 = p_coeff_3hm;
Mp_coeff_4 = p_coeff_4hm;
Mp_coeff_5 = p_coeff_5hm;
Mp_coeff_6 = p_coeff_6hm;
Mp_coeff_7 = p_coeff_7hm;
Mp_coeff_8 = p_coeff_8hm;
Mp_coeff_9 = p_coeff_9h;
Mp_coeff_10 = p_coeff_10h;
Mp_coeff_11 = p_coeff_11h;
Mp_coeff_12 = p_coeff_12h;
Mp_coeff_13 = p_coeff_13h;
Mp_coeff_14 = p_coeff_14h;
Mp_coeff_15 = p_coeff_15h;
Mp_coeff_16 = p_coeff_16h;
Mp_coeff_17 = p_coeff_17h;
Mp_coeff_18 = p_coeff_18h;
Mp_coeff_19 = p_coeff_19h;
Mp_coeff_20 = p_coeff_20h;
Mp_coeff_21 = p_coeff_21h;
Mp_coeff_22 = p_coeff_22h;
Mp_t_1_0 = Mp_coeff_22;
Mp_t_2_0 = Mp_t_1_0 * Mx;
Mp_t_3_0 = Mp_coeff_21 + Mp_t_2_0;
Mp_t_4_0 = Mp_t_3_0 * Mx;
Mp_t_5_0 = Mp_coeff_20 + Mp_t_4_0;
Mp_t_6_0 = Mp_t_5_0 * Mx;
Mp_t_7_0 = Mp_coeff_19 + Mp_t_6_0;
Mp_t_8_0 = Mp_t_7_0 * Mx;
Mp_t_9_0 = Mp_coeff_18 + Mp_t_8_0;
Mp_t_10_0 = Mp_t_9_0 * Mx;
Mp_t_11_0 = Mp_coeff_17 + Mp_t_10_0;
Mp_t_12_0 = Mp_t_11_0 * Mx;
Mp_t_13_0 = Mp_coeff_16 + Mp_t_12_0;
Mp_t_14_0 = Mp_t_13_0 * Mx;
Mp_t_15_0 = Mp_coeff_15 + Mp_t_14_0;
Mp_t_16_0 = Mp_t_15_0 * Mx;
Mp_t_17_0 = Mp_coeff_14 + Mp_t_16_0;
Mp_t_18_0 = Mx * Mp_t_17_0;
Mp_t_19_0 = Mp_coeff_13 + Mp_t_18_0;
Mp_t_20_0 = Mx * Mp_t_19_0;
Mp_t_21_0 = Mp_coeff_12 + Mp_t_20_0;
Mp_t_22_0 = Mx * Mp_t_21_0;
Mp_t_23_0 = Mp_coeff_11 + Mp_t_22_0;
Mp_t_24_0 = Mx * Mp_t_23_0;
Mp_t_25_0 = Mp_coeff_10 + Mp_t_24_0;
Mp_t_26_0 = Mx * Mp_t_25_0;
Mp_t_27_0 = Mp_coeff_9 + Mp_t_26_0;
Mp_t_28_0 = (Mp_t_27_0 * Mx) + Mp_coeff_8;
Mp_t_29_0 = (Mp_t_28_0 * Mx) + Mp_coeff_7;
Mp_t_30_0 = (Mp_t_29_0 * Mx) + Mp_coeff_6;
Mp_t_31_0 = (Mp_t_30_0 * Mx) + Mp_coeff_5;
Mp_t_32_0 = (Mp_t_31_0 * Mx) + Mp_coeff_4;
Mp_t_33_0 = (Mp_t_32_0 * Mx) + Mp_coeff_3;
Mp_t_34_0 = Mx * Mp_t_33_0;
Mp_t_35_0 = Mp_coeff_2 + Mp_t_34_0;
Mp_t_36_0 = Mx * Mp_t_35_0;
Mp_t_37_0 = Mp_coeff_1 + Mp_t_36_0;
Mp_t_38_0 = Mx * Mp_t_37_0;
Mp_t_39_0 = Mp_coeff_0 + Mp_t_38_0;
Mp_res = Mp_t_39_0;

# Definition of the relative arithmetical error
epsilon = (p_reshml - Mp_res) / Mp_res;

# Implication to prove
{((
   x in [-715705849514187b-54,-715705849514187b-454]
/\ |overlap_p_t_35_0| in [1b-400,1b-45]    # Verify the lower bound
/\ |p_t_35_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_36_0| in [1b-400,1b-40]    # Verify the lower bound
/\ |p_t_36_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_37_0| in [1b-400,1b-35]    # Verify the lower bound
/\ |p_t_37_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_38_0| in [1b-400,1b-30]    # Verify the lower bound
/\ |p_t_38_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_39_0| in [1b-400,1b-25]    # Verify the lower bound
/\ |p_t_39_0ml| in [1b-1021,1b1023]
/\ |overlap_p_res| in [1b-400,1b-52]    # Verify the lower bound
/\ |p_resml| in [1b-1021,1b1023]
) \/ (
   x in [178926462378499b-452,178926462378499b-52]
/\ |overlap_p_t_35_0| in [1b-400,1b-45]    # Verify the lower bound
/\ |p_t_35_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_36_0| in [1b-400,1b-40]    # Verify the lower bound
/\ |p_t_36_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_37_0| in [1b-400,1b-35]    # Verify the lower bound
/\ |p_t_37_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_38_0| in [1b-400,1b-30]    # Verify the lower bound
/\ |p_t_38_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_39_0| in [1b-400,1b-25]    # Verify the lower bound
/\ |p_t_39_0ml| in [1b-1021,1b1023]
/\ |overlap_p_res| in [1b-400,1b-52]    # Verify the lower bound
/\ |p_resml| in [1b-1021,1b1023]
))
->
(
   epsilon in ?
)}

# Hints and Meta-Hints for expansion decomposition

p_t_17_0h ~ p_t_17_0hm;
p_t_18_0h ~ p_t_18_0hm;
p_t_19_0h ~ p_t_19_0hm;
p_t_20_0h ~ p_t_20_0hm;
p_t_21_0h ~ p_t_21_0hm;
p_t_22_0h ~ p_t_22_0hm;
p_t_23_0h ~ p_t_23_0hm;
p_t_24_0h ~ p_t_24_0hm;
p_t_25_0h ~ p_t_25_0hm;
p_t_26_0h ~ p_t_26_0hm;
p_t_27_0h ~ p_t_27_0hm;
p_t_28_0h ~ p_t_28_0hm;
p_t_29_0h ~ p_t_29_0hm;
p_t_30_0h ~ p_t_30_0hm;
p_t_31_0h ~ p_t_31_0hm;
p_t_32_0h ~ p_t_32_0hm;
p_t_33_0h ~ p_t_33_0hm;
p_t_34_0h ~ p_t_34_0hm;
p_t_35_0hm ~ p_t_35_0hml;
p_t_35_0h ~ p_t_35_0hm;
p_t_35_0h ~ p_t_35_0hml;
p_t_35_0m -> p_t_35_0h * overlap_p_t_35_0;
p_t_35_0l / p_t_35_0m -> - ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml) / (1 + ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml));
(p_t_35_0hm - p_t_35_0hml) / p_t_35_0hml -> - (p_t_35_0l / p_t_35_0m) * (1 / (1 / overlap_p_t_35_0 + 1 + (p_t_35_0l / p_t_35_0m)));
p_t_35_0ml -> p_t_35_0hml / ((1 + ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml)) / overlap_p_t_35_0 + 1);
(p_t_35_0h - p_t_35_0hm) / p_t_35_0hm -> - 1 / (1 / overlap_p_t_35_0 + 1);
p_t_35_0h -> p_t_35_0hml / (overlap_p_t_35_0 / (1 + ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml)) + 1);
p_t_36_0hm ~ p_t_36_0hml;
p_t_36_0h ~ p_t_36_0hm;
p_t_36_0h ~ p_t_36_0hml;
p_t_36_0m -> p_t_36_0h * overlap_p_t_36_0;
p_t_36_0l / p_t_36_0m -> - ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml) / (1 + ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml));
(p_t_36_0hm - p_t_36_0hml) / p_t_36_0hml -> - (p_t_36_0l / p_t_36_0m) * (1 / (1 / overlap_p_t_36_0 + 1 + (p_t_36_0l / p_t_36_0m)));
p_t_36_0ml -> p_t_36_0hml / ((1 + ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml)) / overlap_p_t_36_0 + 1);
(p_t_36_0h - p_t_36_0hm) / p_t_36_0hm -> - 1 / (1 / overlap_p_t_36_0 + 1);
p_t_36_0h -> p_t_36_0hml / (overlap_p_t_36_0 / (1 + ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml)) + 1);
p_t_37_0hm ~ p_t_37_0hml;
p_t_37_0h ~ p_t_37_0hm;
p_t_37_0h ~ p_t_37_0hml;
p_t_37_0m -> p_t_37_0h * overlap_p_t_37_0;
p_t_37_0l / p_t_37_0m -> - ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml) / (1 + ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml));
(p_t_37_0hm - p_t_37_0hml) / p_t_37_0hml -> - (p_t_37_0l / p_t_37_0m) * (1 / (1 / overlap_p_t_37_0 + 1 + (p_t_37_0l / p_t_37_0m)));
p_t_37_0ml -> p_t_37_0hml / ((1 + ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml)) / overlap_p_t_37_0 + 1);
(p_t_37_0h - p_t_37_0hm) / p_t_37_0hm -> - 1 / (1 / overlap_p_t_37_0 + 1);
p_t_37_0h -> p_t_37_0hml / (overlap_p_t_37_0 / (1 + ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml)) + 1);
p_t_38_0hm ~ p_t_38_0hml;
p_t_38_0h ~ p_t_38_0hm;
p_t_38_0h ~ p_t_38_0hml;
p_t_38_0m -> p_t_38_0h * overlap_p_t_38_0;
p_t_38_0l / p_t_38_0m -> - ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml) / (1 + ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml));
(p_t_38_0hm - p_t_38_0hml) / p_t_38_0hml -> - (p_t_38_0l / p_t_38_0m) * (1 / (1 / overlap_p_t_38_0 + 1 + (p_t_38_0l / p_t_38_0m)));
p_t_38_0ml -> p_t_38_0hml / ((1 + ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml)) / overlap_p_t_38_0 + 1);
(p_t_38_0h - p_t_38_0hm) / p_t_38_0hm -> - 1 / (1 / overlap_p_t_38_0 + 1);
p_t_38_0h -> p_t_38_0hml / (overlap_p_t_38_0 / (1 + ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml)) + 1);
p_t_39_0hm ~ p_t_39_0hml;
p_t_39_0h ~ p_t_39_0hm;
p_t_39_0h ~ p_t_39_0hml;
p_t_39_0m -> p_t_39_0h * overlap_p_t_39_0;
p_t_39_0l / p_t_39_0m -> - ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml) / (1 + ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml));
(p_t_39_0hm - p_t_39_0hml) / p_t_39_0hml -> - (p_t_39_0l / p_t_39_0m) * (1 / (1 / overlap_p_t_39_0 + 1 + (p_t_39_0l / p_t_39_0m)));
p_t_39_0ml -> p_t_39_0hml / ((1 + ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml)) / overlap_p_t_39_0 + 1);
(p_t_39_0h - p_t_39_0hm) / p_t_39_0hm -> - 1 / (1 / overlap_p_t_39_0 + 1);
p_t_39_0h -> p_t_39_0hml / (overlap_p_t_39_0 / (1 + ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml)) + 1);
p_reshm ~ p_reshml;
p_resh ~ p_reshm;
p_resh ~ p_reshml;
p_resm -> p_resh * overlap_p_res;
p_resl / p_resm -> - ((p_resm - p_resml) / p_resml) / (1 + ((p_resm - p_resml) / p_resml));
(p_reshm - p_reshml) / p_reshml -> - (p_resl / p_resm) * (1 / (1 / overlap_p_res + 1 + (p_resl / p_resm)));
p_resml -> p_reshml / ((1 + ((p_resm - p_resml) / p_resml)) / overlap_p_res + 1);
(p_resh - p_reshm) / p_reshm -> - 1 / (1 / overlap_p_res + 1);
p_resh -> p_reshml / (overlap_p_res / (1 + ((p_resm - p_resml) / p_resml)) + 1);

# Meta-Hints for Horner scheme
p_t_1_0h ~ Mp_t_1_0;
p_t_2_0h ~ Mp_t_2_0;
p_t_3_0h ~ Mp_t_3_0;
p_t_4_0h ~ Mp_t_4_0;
p_t_5_0h ~ Mp_t_5_0;
p_t_6_0h ~ Mp_t_6_0;
p_t_7_0h ~ Mp_t_7_0;
p_t_8_0h ~ Mp_t_8_0;
p_t_9_0h ~ Mp_t_9_0;
p_t_10_0h ~ Mp_t_10_0;
p_t_11_0h ~ Mp_t_11_0;
p_t_12_0h ~ Mp_t_12_0;
p_t_13_0h ~ Mp_t_13_0;
p_t_14_0h ~ Mp_t_14_0;
p_t_15_0h ~ Mp_t_15_0;
p_t_16_0h ~ Mp_t_16_0;
p_t_17_0hm ~ Mp_t_17_0;
p_t_18_0hm ~ Mp_t_18_0;
p_t_19_0hm ~ Mp_t_19_0;
p_t_20_0hm ~ Mp_t_20_0;
p_t_21_0hm ~ Mp_t_21_0;
p_t_22_0hm ~ Mp_t_22_0;
p_t_23_0hm ~ Mp_t_23_0;
p_t_24_0hm ~ Mp_t_24_0;
p_t_25_0hm ~ Mp_t_25_0;
p_t_26_0hm ~ Mp_t_26_0;
p_t_27_0hm ~ Mp_t_27_0;
p_t_28_0hm ~ Mp_t_28_0;
p_t_29_0hm ~ Mp_t_29_0;
p_t_30_0hm ~ Mp_t_30_0;
p_t_31_0hm ~ Mp_t_31_0;
p_t_32_0hm ~ Mp_t_32_0;
p_t_33_0hm ~ Mp_t_33_0;
p_t_34_0hm ~ Mp_t_34_0;
p_t_35_0hml ~ Mp_t_35_0;
p_t_36_0hml ~ Mp_t_36_0;
p_t_37_0hml ~ Mp_t_37_0;
p_t_38_0hml ~ Mp_t_38_0;
p_t_39_0hml ~ Mp_t_39_0;
p_reshml ~ Mp_res;

# Dichotomies for triple-double decomposition
$ p_t_35_0hml in (0);
$ p_t_35_0ml in (0);
$ p_t_36_0hml in (0);
$ p_t_36_0ml in (0);
$ p_t_37_0hml in (0);
$ p_t_37_0ml in (0);
$ p_t_38_0hml in (0);
$ p_t_38_0ml in (0);
$ p_t_39_0hml in (0);
$ p_t_39_0ml in (0);
$ p_reshml in (0);
$ p_resml in (0);

# Dichotomy for the error bound
epsilon $ xhml;

