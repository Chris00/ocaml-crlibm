# The polynomial to implement is: 2275941405803339b-51 + (x * ((-6362552512264725b-56) + (x * (3031517174156445b-57 + (x * ((-1916916249275531b-58) + (x * (2775872004195495b-60 + (x * ((-8705693150762623b-63) + (x * (3596618703231213b-63 + (x * ((-3084299124302975b-64) + (x * (1359599812531581b-64 + (x * ((-4899514141103273b-67) + (x * (566891145413529b-65 + (x * (-8316266913880567b-70))))))))))))))))))))))
# The polynomial implemented is: 2275941405803339b-51 + (x * ((-6362552512264725b-56) + (x * (3031517174156445b-57 + (x * ((-1916916249275531b-58) + (x * (2775872004195495b-60 + (x * ((-8705693150762623b-63) + (x * (3596618703231213b-63 + (x * ((-3084299124302975b-64) + (x * (1359599812531581b-64 + (x * ((-4899514141103273b-67) + (x * (566891145413529b-65 + (x * (-8316266913880567b-70))))))))))))))))))))))
# The domain is [-140737488356209b-50;1125899906835577b-53]
# The free variable x is a double precision number, the result p_res* is stored on a double-double number.
# The code produces 36 intermediate and final arithmetical approximations.

# Double precision rounding operator:
@double = float<ieee_64,ne>;

# Disable some annoying warnings:
#@-Wno-dichotomy-failure

# Helper definitions for decomposing the free variable
xh = x;

# Transcription of the C code
p_coeff_0h = double(1.01072102056824553173441927356179803609848022460937500000000000000000000000000000e+00);

p_coeff_1h = double(-8.82981536812866424357437722392205614596605300903320312500000000000000000000000000e-02);

p_coeff_2h = double(2.10353760393442237863759203264635289087891578674316406250000000000000000000000000e-02);

p_coeff_3h = double(-6.65063923819934552095212154654291225597262382507324218750000000000000000000000000e-03);

p_coeff_4h = double(2.40768516599235756631136595729003602173179388046264648437500000000000000000000000e-03);

p_coeff_5h = double(-9.43873142704901193882072174545783127541653811931610107421875000000000000000000000e-04);

p_coeff_6h = double(3.89946181164527888064752492169873221428133547306060791015625000000000000000000000e-04);

p_coeff_7h = double(-1.67200190558221219085804909454395783541258424520492553710937500000000000000000000e-04);

p_coeff_8h = double(7.37040535228812338126858083597880977322347462177276611328125000000000000000000000e-05);

p_coeff_9h = double(-3.32003992244226181431050737291599261880037374794483184814453125000000000000000000e-05);

p_coeff_10h = double(1.53656152855036036170705004977321550541091710329055786132812500000000000000000000e-05);

p_coeff_11h = double(-7.04415207421768136802344914548790200115035986527800559997558593750000000000000000e-06);

p_t_1_0h = p_coeff_11h;

p_t_2_0h = double(p_t_1_0h * xh);
p_t_3_0h = double(p_coeff_10h + p_t_2_0h);
p_t_4_0h = double(p_t_3_0h * xh);
p_t_5_0h = double(p_coeff_9h + p_t_4_0h);
p_t_6_0h = double(p_t_5_0h * xh);
p_t_7_0h = double(p_coeff_8h + p_t_6_0h);
p_t_8_0h = double(p_t_7_0h * xh);
p_t_9_0h = double(p_coeff_7h + p_t_8_0h);
p_t_10_0h = double(p_t_9_0h * xh);
p_t_11_0h = double(p_coeff_6h + p_t_10_0h);
p_t_12_0h = double(p_t_11_0h * xh);
p_t_13_0h = double(p_coeff_5h + p_t_12_0h);
p_t_14_0h = double(p_t_13_0h * xh);
p_t_15_0h = double(p_coeff_4h + p_t_14_0h);
p_t_16_0h = double(p_t_15_0h * xh);
p_t_17_0h = double(p_coeff_3h + p_t_16_0h);
p_t_18_0h = double(p_t_17_0h * xh);
p_t_19_0h = double(p_coeff_2h + p_t_18_0h);
p_t_20_0h = double(p_t_19_0h * xh);
p_t_21_0hm = p_coeff_1h + p_t_20_0h;
p_t_21_0h = double(p_t_21_0hm);
p_t_21_0m = p_t_21_0hm - p_t_21_0h;

p_t_22_0hm = mul_rel<102>(xh,p_t_21_0hm);
p_t_22_0h = double(p_t_22_0hm);
p_t_22_0m = p_t_22_0hm - p_t_22_0h;

p_t_23_0hm = add_rel<102>(p_coeff_0h,p_t_22_0hm);
p_t_23_0h = double(p_t_23_0hm);
p_t_23_0m = p_t_23_0hm - p_t_23_0h;

p_reshm = p_t_23_0hm;
p_resh = p_t_23_0h;
p_resm = p_t_23_0m;


# Mathematical equivalents
Mx = x;
Mp_coeff_0 = p_coeff_0h;
Mp_coeff_1 = p_coeff_1h;
Mp_coeff_2 = p_coeff_2h;
Mp_coeff_3 = p_coeff_3h;
Mp_coeff_4 = p_coeff_4h;
Mp_coeff_5 = p_coeff_5h;
Mp_coeff_6 = p_coeff_6h;
Mp_coeff_7 = p_coeff_7h;
Mp_coeff_8 = p_coeff_8h;
Mp_coeff_9 = p_coeff_9h;
Mp_coeff_10 = p_coeff_10h;
Mp_coeff_11 = p_coeff_11h;
Mp_t_1_0 = Mp_coeff_11;
Mp_t_2_0 = Mp_t_1_0 * Mx;
Mp_t_3_0 = Mp_coeff_10 + Mp_t_2_0;
Mp_t_4_0 = Mp_t_3_0 * Mx;
Mp_t_5_0 = Mp_coeff_9 + Mp_t_4_0;
Mp_t_6_0 = Mp_t_5_0 * Mx;
Mp_t_7_0 = Mp_coeff_8 + Mp_t_6_0;
Mp_t_8_0 = Mp_t_7_0 * Mx;
Mp_t_9_0 = Mp_coeff_7 + Mp_t_8_0;
Mp_t_10_0 = Mp_t_9_0 * Mx;
Mp_t_11_0 = Mp_coeff_6 + Mp_t_10_0;
Mp_t_12_0 = Mp_t_11_0 * Mx;
Mp_t_13_0 = Mp_coeff_5 + Mp_t_12_0;
Mp_t_14_0 = Mp_t_13_0 * Mx;
Mp_t_15_0 = Mp_coeff_4 + Mp_t_14_0;
Mp_t_16_0 = Mp_t_15_0 * Mx;
Mp_t_17_0 = Mp_coeff_3 + Mp_t_16_0;
Mp_t_18_0 = Mp_t_17_0 * Mx;
Mp_t_19_0 = Mp_coeff_2 + Mp_t_18_0;
Mp_t_20_0 = Mp_t_19_0 * Mx;
Mp_t_21_0 = Mp_coeff_1 + Mp_t_20_0;
Mp_t_22_0 = Mx * Mp_t_21_0;
Mp_t_23_0 = Mp_coeff_0 + Mp_t_22_0;
Mp_res = Mp_t_23_0;

# Definition of the relative arithmetical error
epsilon = (p_reshm - Mp_res) / Mp_res;

# Implication to prove
{((
   x in [-140737488356209b-50,-140737488356209b-450]
) \/ (
   x in [1125899906835577b-453,1125899906835577b-53]
))
->
(
   epsilon in ?
)}

# Hints and Meta-Hints for expansion decomposition

p_t_21_0h ~ p_t_21_0hm;
p_t_22_0h ~ p_t_22_0hm;
p_t_23_0h ~ p_t_23_0hm;

# Meta-Hints for Horner scheme
p_t_1_0h ~ Mp_t_1_0;
p_t_2_0h ~ Mp_t_2_0;
p_t_3_0h ~ Mp_t_3_0;
p_t_4_0h ~ Mp_t_4_0;
p_t_5_0h ~ Mp_t_5_0;
p_t_6_0h ~ Mp_t_6_0;
p_t_7_0h ~ Mp_t_7_0;
p_t_8_0h ~ Mp_t_8_0;
p_t_9_0h ~ Mp_t_9_0;
p_t_10_0h ~ Mp_t_10_0;
p_t_11_0h ~ Mp_t_11_0;
p_t_12_0h ~ Mp_t_12_0;
p_t_13_0h ~ Mp_t_13_0;
p_t_14_0h ~ Mp_t_14_0;
p_t_15_0h ~ Mp_t_15_0;
p_t_16_0h ~ Mp_t_16_0;
p_t_17_0h ~ Mp_t_17_0;
p_t_18_0h ~ Mp_t_18_0;
p_t_19_0h ~ Mp_t_19_0;
p_t_20_0h ~ Mp_t_20_0;
p_t_21_0hm ~ Mp_t_21_0;
p_t_22_0hm ~ Mp_t_22_0;
p_t_23_0hm ~ Mp_t_23_0;
p_reshm ~ Mp_res;

# Dichotomies for triple-double decomposition

# Dichotomy for the error bound
epsilon $ xhm;

