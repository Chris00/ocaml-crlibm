# The polynomial to implement is: 224072655290838820901547103663141b-108 + (x * (52617200066848308315160320054687b-105 + (x * (1564981109275549b-51 + (x * (4992165443239819b-52 + (x * (8442373737503053b-52 + (x * (1027827836419783b-48 + (x * (132850146592389b-44 + (x * (4608740736026111b-48 + (x * (2581118930247463b-46 + (x * (5928868654976949b-46 + (x * (108504530938057b-39 + (x * (522450050528739b-40 + (x * 5043156194756227b-42)))))))))))))))))))))))
# The polynomial implemented is: 224072655290838820901547103663141b-108 + (x * (52617200066848308315160320054687b-105 + (x * (1564981109275549b-51 + (x * (4992165443239819b-52 + (x * (8442373737503053b-52 + (x * (1027827836419783b-48 + (x * (132850146592389b-44 + (x * (4608740736026111b-48 + (x * (2581118930247463b-46 + (x * (5928868654976949b-46 + (x * (108504530938057b-39 + (x * (522450050528739b-40 + (x * 5043156194756227b-42)))))))))))))))))))))))
# The domain is [-110485440722351b-52;55242720361239b-51]
# The free variable x is a double precision number, the result p_res* is stored on a double-double number.
# The code produces 37 intermediate and final arithmetical approximations.

# Double precision rounding operator:
@double = float<ieee_64,ne>;

# Disable some annoying warnings:
#@-Wno-dichotomy-failure

# Helper definitions for decomposing the free variable
xh = x;

# Transcription of the C code
p_coeff_0h = double(6.90477178468776764397318856936180964112281799316406250000000000000000000000000000e-01);
p_coeff_0m = double(3.39469506786599975391257859730058491397981612722623695477253136232320684939622879e-18);
p_coeff_0hm = p_coeff_0h + p_coeff_0m;

p_coeff_1h = double(1.29711412734153253012436834978871047496795654296875000000000000000000000000000000e+00);
p_coeff_1m = double(-4.95712225725049321877947559927504147795821978121980078135777603165479376912117004e-17);
p_coeff_1hm = p_coeff_1h + p_coeff_1m;

p_coeff_2h = double(6.94991224248453054457286270917393267154693603515625000000000000000000000000000000e-01);

p_coeff_3h = double(1.10848340356457941702217340207425877451896667480468750000000000000000000000000000e+00);

p_coeff_4h = double(1.87458354117332537391860114439623430371284484863281250000000000000000000000000000e+00);

p_coeff_5h = double(3.65157801390048675216348783578723669052124023437500000000000000000000000000000000e+00);

p_coeff_6h = double(7.55165652847091450894367881119251251220703125000000000000000000000000000000000000e+00);

p_coeff_7h = double(1.63735362549250531571942701702937483787536621093750000000000000000000000000000000e+01);

p_coeff_8h = double(3.66799061204043113093575811944901943206787109375000000000000000000000000000000000e+01);

p_coeff_9h = double(8.42542910813925374213795294053852558135986328125000000000000000000000000000000000e+01);

p_coeff_10h = double(1.97368592013039233279414474964141845703125000000000000000000000000000000000000000e+02);

p_coeff_11h = double(4.75165552896886765665840357542037963867187500000000000000000000000000000000000000e+02);

p_coeff_12h = double(1.14668095983602756859909277409315109252929687500000000000000000000000000000000000e+03);

p_t_1_0h = p_coeff_12h;

p_t_2_0h = double(p_t_1_0h * xh);
p_t_3_0h = double(p_coeff_11h + p_t_2_0h);
p_t_4_0h = double(p_t_3_0h * xh);
p_t_5_0h = double(p_coeff_10h + p_t_4_0h);
p_t_6_0h = double(p_t_5_0h * xh);
p_t_7_0h = double(p_coeff_9h + p_t_6_0h);
p_t_8_0h = double(p_t_7_0h * xh);
p_t_9_0h = double(p_coeff_8h + p_t_8_0h);
p_t_10_0h = double(p_t_9_0h * xh);
p_t_11_0h = double(p_coeff_7h + p_t_10_0h);
p_t_12_0h = double(p_t_11_0h * xh);
p_t_13_0h = double(p_coeff_6h + p_t_12_0h);
p_t_14_0h = double(p_t_13_0h * xh);
p_t_15_0h = double(p_coeff_5h + p_t_14_0h);
p_t_16_0h = double(p_t_15_0h * xh);
p_t_17_0h = double(p_coeff_4h + p_t_16_0h);
p_t_18_0h = double(p_t_17_0h * xh);
p_t_19_0h = double(p_coeff_3h + p_t_18_0h);
p_t_20_0h = double(p_t_19_0h * xh);
p_t_21_0hm = p_coeff_2h + p_t_20_0h;
p_t_21_0h = double(p_t_21_0hm);
p_t_21_0m = p_t_21_0hm - p_t_21_0h;

p_t_22_0hm = fma_rel<100>(p_t_21_0hm,xh,p_coeff_1hm);
p_t_22_0h = double(p_t_22_0hm);
p_t_22_0m = p_t_22_0hm - p_t_22_0h;

p_t_23_0hm = fma_rel<100>(p_t_22_0hm,xh,p_coeff_0hm);
p_t_23_0h = double(p_t_23_0hm);
p_t_23_0m = p_t_23_0hm - p_t_23_0h;

p_reshm = p_t_23_0hm;
p_resh = p_t_23_0h;
p_resm = p_t_23_0m;


# Mathematical equivalents
Mx = x;
Mp_coeff_0 = p_coeff_0hm;
Mp_coeff_1 = p_coeff_1hm;
Mp_coeff_2 = p_coeff_2h;
Mp_coeff_3 = p_coeff_3h;
Mp_coeff_4 = p_coeff_4h;
Mp_coeff_5 = p_coeff_5h;
Mp_coeff_6 = p_coeff_6h;
Mp_coeff_7 = p_coeff_7h;
Mp_coeff_8 = p_coeff_8h;
Mp_coeff_9 = p_coeff_9h;
Mp_coeff_10 = p_coeff_10h;
Mp_coeff_11 = p_coeff_11h;
Mp_coeff_12 = p_coeff_12h;
Mp_t_1_0 = Mp_coeff_12;
Mp_t_2_0 = Mp_t_1_0 * Mx;
Mp_t_3_0 = Mp_coeff_11 + Mp_t_2_0;
Mp_t_4_0 = Mp_t_3_0 * Mx;
Mp_t_5_0 = Mp_coeff_10 + Mp_t_4_0;
Mp_t_6_0 = Mp_t_5_0 * Mx;
Mp_t_7_0 = Mp_coeff_9 + Mp_t_6_0;
Mp_t_8_0 = Mp_t_7_0 * Mx;
Mp_t_9_0 = Mp_coeff_8 + Mp_t_8_0;
Mp_t_10_0 = Mp_t_9_0 * Mx;
Mp_t_11_0 = Mp_coeff_7 + Mp_t_10_0;
Mp_t_12_0 = Mp_t_11_0 * Mx;
Mp_t_13_0 = Mp_coeff_6 + Mp_t_12_0;
Mp_t_14_0 = Mp_t_13_0 * Mx;
Mp_t_15_0 = Mp_coeff_5 + Mp_t_14_0;
Mp_t_16_0 = Mp_t_15_0 * Mx;
Mp_t_17_0 = Mp_coeff_4 + Mp_t_16_0;
Mp_t_18_0 = Mp_t_17_0 * Mx;
Mp_t_19_0 = Mp_coeff_3 + Mp_t_18_0;
Mp_t_20_0 = Mp_t_19_0 * Mx;
Mp_t_21_0 = Mp_coeff_2 + Mp_t_20_0;
Mp_t_22_0 = (Mp_t_21_0 * Mx) + Mp_coeff_1;
Mp_t_23_0 = (Mp_t_22_0 * Mx) + Mp_coeff_0;
Mp_res = Mp_t_23_0;

# Definition of the relative arithmetical error
epsilon = (p_reshm - Mp_res) / Mp_res;

# Implication to prove
{((
   x in [-110485440722351b-52,-110485440722351b-452]
) \/ (
   x in [55242720361239b-451,55242720361239b-51]
))
->
(
   epsilon in ?
)}

# Hints and Meta-Hints for expansion decomposition

p_t_21_0h ~ p_t_21_0hm;
p_t_22_0h ~ p_t_22_0hm;
p_t_23_0h ~ p_t_23_0hm;

# Meta-Hints for Horner scheme
p_t_1_0h ~ Mp_t_1_0;
p_t_2_0h ~ Mp_t_2_0;
p_t_3_0h ~ Mp_t_3_0;
p_t_4_0h ~ Mp_t_4_0;
p_t_5_0h ~ Mp_t_5_0;
p_t_6_0h ~ Mp_t_6_0;
p_t_7_0h ~ Mp_t_7_0;
p_t_8_0h ~ Mp_t_8_0;
p_t_9_0h ~ Mp_t_9_0;
p_t_10_0h ~ Mp_t_10_0;
p_t_11_0h ~ Mp_t_11_0;
p_t_12_0h ~ Mp_t_12_0;
p_t_13_0h ~ Mp_t_13_0;
p_t_14_0h ~ Mp_t_14_0;
p_t_15_0h ~ Mp_t_15_0;
p_t_16_0h ~ Mp_t_16_0;
p_t_17_0h ~ Mp_t_17_0;
p_t_18_0h ~ Mp_t_18_0;
p_t_19_0h ~ Mp_t_19_0;
p_t_20_0h ~ Mp_t_20_0;
p_t_21_0hm ~ Mp_t_21_0;
p_t_22_0hm ~ Mp_t_22_0;
p_t_23_0hm ~ Mp_t_23_0;
p_reshm ~ Mp_res;

# Dichotomies for triple-double decomposition

# Dichotomy for the error bound
epsilon $ xhm;

