# The polynomial to implement is: 1792581242326710567212291806223253b-111 + (x * (52617200066848308332099303297945b-105 + (x * (902150187593629183958092782443033b-110 + (x * (44965428859892640751057159071087b-105 + (x * (4752633902292393250779852752339b-101 + (x * (148125601965768399364062017841291b-105 + (x * (153165790916719773608400395315619b-104 + (x * (41511842370824976233500266801317b-101 + (x * (23248649506122112562773990099117b-99 + (x * (370572309710903b-42 + (x * (6944699428013305b-45 + (x * (4131783695767297b-43 + (x * (2490319441786495b-41 + (x * (3034706834572899b-40 + (x * (933084968080141b-37 + (x * (2313432583692069b-37 + (x * (5775407383919483b-37 + (x * (906590116929055b-33 + (x * (2289170179319731b-33 + (x * (2903438112538227b-32 + (x * (7396622347274281b-32 + (x * (4823126988259909b-30 + (x * 6227373019952893b-29)))))))))))))))))))))))))))))))))))))))))))
# The polynomial implemented is: 1792581242326710567212291806223253b-111 + (x * (52617200066848308332099303297945b-105 + (x * (902150187593629183958092782443033b-110 + (x * (44965428859892640751057159071087b-105 + (x * (4752633902292393250779852752339b-101 + (x * (148125601965768399364062017841291b-105 + (x * (153165790916719773608400395315619b-104 + (x * (41511842370824976233500266801317b-101 + (x * (23248649506122112562773990099117b-99 + (x * (370572309710903b-42 + (x * (6944699428013305b-45 + (x * (4131783695767297b-43 + (x * (2490319441786495b-41 + (x * (3034706834572899b-40 + (x * (933084968080141b-37 + (x * (2313432583692069b-37 + (x * (5775407383919483b-37 + (x * (906590116929055b-33 + (x * (2289170179319731b-33 + (x * (2903438112538227b-32 + (x * (7396622347274281b-32 + (x * (4823126988259909b-30 + (x * 6227373019952893b-29)))))))))))))))))))))))))))))))))))))))))))
# The domain is [-110485440722351b-52;55242720361239b-51]
# The free variable x is a double precision number, the result p_res* is stored on a triple-double number.
# The code produces 63 intermediate and final arithmetical approximations.

# Double precision rounding operator:
@double = float<ieee_64,ne>;

# Disable some annoying warnings:
#@-Wno-dichotomy-failure

# Helper definitions for decomposing the free variable
xh = x;

# Transcription of the C code
p_coeff_0h = double(6.90477178468776764397318856936180964112281799316406250000000000000000000000000000e-01);
p_coeff_0m = double(3.39466231816613032388245073452427079551490712938188829689289960356290976051241159e-18);
p_coeff_0hm = p_coeff_0h + p_coeff_0m;

p_coeff_1h = double(1.29711412734153253012436834978871047496795654296875000000000000000000000000000000e+00);
p_coeff_1m = double(-4.91536443957924304285159601199758593586250555616465329755726543226046487689018250e-17);
p_coeff_1hm = p_coeff_1h + p_coeff_1m;

p_coeff_2h = double(6.94991224248453054457286270917393267154693603515625000000000000000000000000000000e-01);
p_coeff_2m = double(4.14055567174545404801311585696815622965502227300336503257316422832445823587477207e-18);
p_coeff_2hm = p_coeff_2h + p_coeff_2m;

p_coeff_3h = double(1.10848340356455987709693999931914731860160827636718750000000000000000000000000000e+00);
p_coeff_3m = double(4.16266958244922006708243033738862584564114206709881105261672473716316744685173035e-17);
p_coeff_3hm = p_coeff_3h + p_coeff_3m;

p_coeff_4h = double(1.87458354117322345544494055502582341432571411132812500000000000000000000000000000e+00);
p_coeff_4m = double(1.01371418047977543599188915056692109774560397669751488081146817421540617942810059e-16);
p_coeff_4hm = p_coeff_4h + p_coeff_4m;

p_coeff_5h = double(3.65157801416010441286630339163821190595626831054687500000000000000000000000000000e+00);
p_coeff_5m = double(1.26536476346012852031977695308463633490816727090143289924384362166165374219417572e-16);
p_coeff_5hm = p_coeff_5h + p_coeff_5m;

p_coeff_6h = double(7.55165652946598697781155351549386978149414062500000000000000000000000000000000000e+00);
p_coeff_6m = double(-2.14190464475496048348382959343551268818198527301224776131505223020212724804878235e-16);
p_coeff_6hm = p_coeff_6h + p_coeff_6m;

p_coeff_7h = double(1.63735347750204702776954945875331759452819824218750000000000000000000000000000000e+01);
p_coeff_7m = double(1.51055732062479748503833695277300766424363764363347772956558401347137987613677979e-15);
p_coeff_7hm = p_coeff_7h + p_coeff_7m;

p_coeff_8h = double(3.66799013891310394797073968220502138137817382812500000000000000000000000000000000e+01);
p_coeff_8m = double(-1.96467879903428952233615671924270070336884016354295212636316136922687292098999023e-15);
p_coeff_8hm = p_coeff_8h + p_coeff_8m;

p_coeff_9h = double(8.42583880764557306974893435835838317871093750000000000000000000000000000000000000e+01);

p_coeff_10h = double(1.97380229224487067085647140629589557647705078125000000000000000000000000000000000e+02);

p_coeff_11h = double(4.69729422521515630251087713986635208129882812500000000000000000000000000000000000e+02);

p_coeff_12h = double(1.13246616901346669692429713904857635498046875000000000000000000000000000000000000e+03);

p_coeff_13h = double(2.76004978747814584494335576891899108886718750000000000000000000000000000000000000e+03);

p_coeff_14h = double(6.78908667818280082428827881813049316406250000000000000000000000000000000000000000e+03);

p_coeff_15h = double(1.68324374222143451333977282047271728515625000000000000000000000000000000000000000e+04);

p_coeff_16h = double(4.20216193300401428132317960262298583984375000000000000000000000000000000000000000e+04);

p_coeff_17h = double(1.05540980227414402179419994354248046875000000000000000000000000000000000000000000e+05);

p_coeff_18h = double(2.66494483142128563486039638519287109375000000000000000000000000000000000000000000e+05);

p_coeff_19h = double(6.76009364551451755687594413757324218750000000000000000000000000000000000000000000e+05);

p_coeff_20h = double(1.72216034198046685196459293365478515625000000000000000000000000000000000000000000e+06);

p_coeff_21h = double(4.49188704440361727029085159301757812500000000000000000000000000000000000000000000e+06);

p_coeff_22h = double(1.15993861480669919401407241821289062500000000000000000000000000000000000000000000e+07);

p_t_1_0h = p_coeff_22h;

p_t_2_0h = double(p_t_1_0h * xh);
p_t_3_0h = double(p_coeff_21h + p_t_2_0h);
p_t_4_0h = double(p_t_3_0h * xh);
p_t_5_0h = double(p_coeff_20h + p_t_4_0h);
p_t_6_0h = double(p_t_5_0h * xh);
p_t_7_0h = double(p_coeff_19h + p_t_6_0h);
p_t_8_0h = double(p_t_7_0h * xh);
p_t_9_0h = double(p_coeff_18h + p_t_8_0h);
p_t_10_0h = double(p_t_9_0h * xh);
p_t_11_0h = double(p_coeff_17h + p_t_10_0h);
p_t_12_0h = double(p_t_11_0h * xh);
p_t_13_0h = double(p_coeff_16h + p_t_12_0h);
p_t_14_0h = double(p_t_13_0h * xh);
p_t_15_0h = double(p_coeff_15h + p_t_14_0h);
p_t_16_0h = double(p_t_15_0h * xh);
p_t_17_0hm = p_coeff_14h + p_t_16_0h;
p_t_17_0h = double(p_t_17_0hm);
p_t_17_0m = p_t_17_0hm - p_t_17_0h;

p_t_18_0hm = mul_rel<102>(xh,p_t_17_0hm);
p_t_18_0h = double(p_t_18_0hm);
p_t_18_0m = p_t_18_0hm - p_t_18_0h;

p_t_19_0hm = add_rel<102>(p_coeff_13h,p_t_18_0hm);
p_t_19_0h = double(p_t_19_0hm);
p_t_19_0m = p_t_19_0hm - p_t_19_0h;

p_t_20_0hm = mul_rel<102>(xh,p_t_19_0hm);
p_t_20_0h = double(p_t_20_0hm);
p_t_20_0m = p_t_20_0hm - p_t_20_0h;

p_t_21_0hm = add_rel<102>(p_coeff_12h,p_t_20_0hm);
p_t_21_0h = double(p_t_21_0hm);
p_t_21_0m = p_t_21_0hm - p_t_21_0h;

p_t_22_0hm = mul_rel<102>(xh,p_t_21_0hm);
p_t_22_0h = double(p_t_22_0hm);
p_t_22_0m = p_t_22_0hm - p_t_22_0h;

p_t_23_0hm = add_rel<102>(p_coeff_11h,p_t_22_0hm);
p_t_23_0h = double(p_t_23_0hm);
p_t_23_0m = p_t_23_0hm - p_t_23_0h;

p_t_24_0hm = mul_rel<102>(xh,p_t_23_0hm);
p_t_24_0h = double(p_t_24_0hm);
p_t_24_0m = p_t_24_0hm - p_t_24_0h;

p_t_25_0hm = add_rel<102>(p_coeff_10h,p_t_24_0hm);
p_t_25_0h = double(p_t_25_0hm);
p_t_25_0m = p_t_25_0hm - p_t_25_0h;

p_t_26_0hm = mul_rel<102>(xh,p_t_25_0hm);
p_t_26_0h = double(p_t_26_0hm);
p_t_26_0m = p_t_26_0hm - p_t_26_0h;

p_t_27_0hm = add_rel<102>(p_coeff_9h,p_t_26_0hm);
p_t_27_0h = double(p_t_27_0hm);
p_t_27_0m = p_t_27_0hm - p_t_27_0h;

p_t_28_0hm = fma_rel<100>(p_t_27_0hm,xh,p_coeff_8hm);
p_t_28_0h = double(p_t_28_0hm);
p_t_28_0m = p_t_28_0hm - p_t_28_0h;

p_t_29_0hm = fma_rel<100>(p_t_28_0hm,xh,p_coeff_7hm);
p_t_29_0h = double(p_t_29_0hm);
p_t_29_0m = p_t_29_0hm - p_t_29_0h;

p_t_30_0hm = fma_rel<100>(p_t_29_0hm,xh,p_coeff_6hm);
p_t_30_0h = double(p_t_30_0hm);
p_t_30_0m = p_t_30_0hm - p_t_30_0h;

p_t_31_0hm = fma_rel<100>(p_t_30_0hm,xh,p_coeff_5hm);
p_t_31_0h = double(p_t_31_0hm);
p_t_31_0m = p_t_31_0hm - p_t_31_0h;

p_t_32_0hm = fma_rel<100>(p_t_31_0hm,xh,p_coeff_4hm);
p_t_32_0h = double(p_t_32_0hm);
p_t_32_0m = p_t_32_0hm - p_t_32_0h;

p_t_33_0hm = fma_rel<100>(p_t_32_0hm,xh,p_coeff_3hm);
p_t_33_0h = double(p_t_33_0hm);
p_t_33_0m = p_t_33_0hm - p_t_33_0h;

p_t_34_0hm = mul_rel<102>(xh,p_t_33_0hm);
p_t_34_0h = double(p_t_34_0hm);
p_t_34_0m = p_t_34_0hm - p_t_34_0h;

p_t_35_0hml = add_rel<140>(p_coeff_2hm,p_t_34_0hm);
p_t_35_0ml = p_t_35_0hml - p_t_35_0h;
p_t_35_0m = double(p_t_35_0ml);
p_t_35_0l = p_t_35_0ml - p_t_35_0m;
p_t_35_0hm = p_t_35_0h + p_t_35_0m;
overlap_p_t_35_0 = p_t_35_0m / p_t_35_0h;

p_t_36_0hml = mul_rel<145>(xh,p_t_35_0hml);
p_t_36_0ml = p_t_36_0hml - p_t_36_0h;
p_t_36_0m = double(p_t_36_0ml);
p_t_36_0l = p_t_36_0ml - p_t_36_0m;
p_t_36_0hm = p_t_36_0h + p_t_36_0m;
overlap_p_t_36_0 = p_t_36_0m / p_t_36_0h;

p_t_37_0hml = add_rel<143>(p_coeff_1hm,p_t_36_0hml);
p_t_37_0ml = p_t_37_0hml - p_t_37_0h;
p_t_37_0m = double(p_t_37_0ml);
p_t_37_0l = p_t_37_0ml - p_t_37_0m;
p_t_37_0hm = p_t_37_0h + p_t_37_0m;
overlap_p_t_37_0 = p_t_37_0m / p_t_37_0h;

p_t_38_0hml = mul_rel<135>(xh,p_t_37_0hml);
p_t_38_0ml = p_t_38_0hml - p_t_38_0h;
p_t_38_0m = double(p_t_38_0ml);
p_t_38_0l = p_t_38_0ml - p_t_38_0m;
p_t_38_0hm = p_t_38_0h + p_t_38_0m;
overlap_p_t_38_0 = p_t_38_0m / p_t_38_0h;

p_t_39_0hml = add_rel<133>(p_coeff_0hm,p_t_38_0hml);
p_t_39_0ml = p_t_39_0hml - p_t_39_0h;
p_t_39_0m = double(p_t_39_0ml);
p_t_39_0l = p_t_39_0ml - p_t_39_0m;
p_t_39_0hm = p_t_39_0h + p_t_39_0m;
overlap_p_t_39_0 = p_t_39_0m / p_t_39_0h;

p_reshml = p_t_39_0hml;
p_resml = p_reshml - p_resh;
p_resm = double(p_resml);
p_resl = p_resml - p_resm;
p_reshm = p_resh + p_resm;
overlap_p_res = p_resm / p_resh;


# Mathematical equivalents
Mx = x;
Mp_coeff_0 = p_coeff_0hm;
Mp_coeff_1 = p_coeff_1hm;
Mp_coeff_2 = p_coeff_2hm;
Mp_coeff_3 = p_coeff_3hm;
Mp_coeff_4 = p_coeff_4hm;
Mp_coeff_5 = p_coeff_5hm;
Mp_coeff_6 = p_coeff_6hm;
Mp_coeff_7 = p_coeff_7hm;
Mp_coeff_8 = p_coeff_8hm;
Mp_coeff_9 = p_coeff_9h;
Mp_coeff_10 = p_coeff_10h;
Mp_coeff_11 = p_coeff_11h;
Mp_coeff_12 = p_coeff_12h;
Mp_coeff_13 = p_coeff_13h;
Mp_coeff_14 = p_coeff_14h;
Mp_coeff_15 = p_coeff_15h;
Mp_coeff_16 = p_coeff_16h;
Mp_coeff_17 = p_coeff_17h;
Mp_coeff_18 = p_coeff_18h;
Mp_coeff_19 = p_coeff_19h;
Mp_coeff_20 = p_coeff_20h;
Mp_coeff_21 = p_coeff_21h;
Mp_coeff_22 = p_coeff_22h;
Mp_t_1_0 = Mp_coeff_22;
Mp_t_2_0 = Mp_t_1_0 * Mx;
Mp_t_3_0 = Mp_coeff_21 + Mp_t_2_0;
Mp_t_4_0 = Mp_t_3_0 * Mx;
Mp_t_5_0 = Mp_coeff_20 + Mp_t_4_0;
Mp_t_6_0 = Mp_t_5_0 * Mx;
Mp_t_7_0 = Mp_coeff_19 + Mp_t_6_0;
Mp_t_8_0 = Mp_t_7_0 * Mx;
Mp_t_9_0 = Mp_coeff_18 + Mp_t_8_0;
Mp_t_10_0 = Mp_t_9_0 * Mx;
Mp_t_11_0 = Mp_coeff_17 + Mp_t_10_0;
Mp_t_12_0 = Mp_t_11_0 * Mx;
Mp_t_13_0 = Mp_coeff_16 + Mp_t_12_0;
Mp_t_14_0 = Mp_t_13_0 * Mx;
Mp_t_15_0 = Mp_coeff_15 + Mp_t_14_0;
Mp_t_16_0 = Mp_t_15_0 * Mx;
Mp_t_17_0 = Mp_coeff_14 + Mp_t_16_0;
Mp_t_18_0 = Mx * Mp_t_17_0;
Mp_t_19_0 = Mp_coeff_13 + Mp_t_18_0;
Mp_t_20_0 = Mx * Mp_t_19_0;
Mp_t_21_0 = Mp_coeff_12 + Mp_t_20_0;
Mp_t_22_0 = Mx * Mp_t_21_0;
Mp_t_23_0 = Mp_coeff_11 + Mp_t_22_0;
Mp_t_24_0 = Mx * Mp_t_23_0;
Mp_t_25_0 = Mp_coeff_10 + Mp_t_24_0;
Mp_t_26_0 = Mx * Mp_t_25_0;
Mp_t_27_0 = Mp_coeff_9 + Mp_t_26_0;
Mp_t_28_0 = (Mp_t_27_0 * Mx) + Mp_coeff_8;
Mp_t_29_0 = (Mp_t_28_0 * Mx) + Mp_coeff_7;
Mp_t_30_0 = (Mp_t_29_0 * Mx) + Mp_coeff_6;
Mp_t_31_0 = (Mp_t_30_0 * Mx) + Mp_coeff_5;
Mp_t_32_0 = (Mp_t_31_0 * Mx) + Mp_coeff_4;
Mp_t_33_0 = (Mp_t_32_0 * Mx) + Mp_coeff_3;
Mp_t_34_0 = Mx * Mp_t_33_0;
Mp_t_35_0 = Mp_coeff_2 + Mp_t_34_0;
Mp_t_36_0 = Mx * Mp_t_35_0;
Mp_t_37_0 = Mp_coeff_1 + Mp_t_36_0;
Mp_t_38_0 = Mx * Mp_t_37_0;
Mp_t_39_0 = Mp_coeff_0 + Mp_t_38_0;
Mp_res = Mp_t_39_0;

# Definition of the relative arithmetical error
epsilon = (p_reshml - Mp_res) / Mp_res;

# Implication to prove
{((
   x in [-110485440722351b-52,-110485440722351b-452]
/\ |overlap_p_t_35_0| in [1b-400,1b-45]    # Verify the lower bound
/\ |p_t_35_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_36_0| in [1b-400,1b-40]    # Verify the lower bound
/\ |p_t_36_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_37_0| in [1b-400,1b-35]    # Verify the lower bound
/\ |p_t_37_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_38_0| in [1b-400,1b-30]    # Verify the lower bound
/\ |p_t_38_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_39_0| in [1b-400,1b-25]    # Verify the lower bound
/\ |p_t_39_0ml| in [1b-1021,1b1023]
/\ |overlap_p_res| in [1b-400,1b-52]    # Verify the lower bound
/\ |p_resml| in [1b-1021,1b1023]
) \/ (
   x in [55242720361239b-451,55242720361239b-51]
/\ |overlap_p_t_35_0| in [1b-400,1b-45]    # Verify the lower bound
/\ |p_t_35_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_36_0| in [1b-400,1b-40]    # Verify the lower bound
/\ |p_t_36_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_37_0| in [1b-400,1b-35]    # Verify the lower bound
/\ |p_t_37_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_38_0| in [1b-400,1b-30]    # Verify the lower bound
/\ |p_t_38_0ml| in [1b-1021,1b1023]
/\ |overlap_p_t_39_0| in [1b-400,1b-25]    # Verify the lower bound
/\ |p_t_39_0ml| in [1b-1021,1b1023]
/\ |overlap_p_res| in [1b-400,1b-52]    # Verify the lower bound
/\ |p_resml| in [1b-1021,1b1023]
))
->
(
   epsilon in ?
)}

# Hints and Meta-Hints for expansion decomposition

p_t_17_0h ~ p_t_17_0hm;
p_t_18_0h ~ p_t_18_0hm;
p_t_19_0h ~ p_t_19_0hm;
p_t_20_0h ~ p_t_20_0hm;
p_t_21_0h ~ p_t_21_0hm;
p_t_22_0h ~ p_t_22_0hm;
p_t_23_0h ~ p_t_23_0hm;
p_t_24_0h ~ p_t_24_0hm;
p_t_25_0h ~ p_t_25_0hm;
p_t_26_0h ~ p_t_26_0hm;
p_t_27_0h ~ p_t_27_0hm;
p_t_28_0h ~ p_t_28_0hm;
p_t_29_0h ~ p_t_29_0hm;
p_t_30_0h ~ p_t_30_0hm;
p_t_31_0h ~ p_t_31_0hm;
p_t_32_0h ~ p_t_32_0hm;
p_t_33_0h ~ p_t_33_0hm;
p_t_34_0h ~ p_t_34_0hm;
p_t_35_0hm ~ p_t_35_0hml;
p_t_35_0h ~ p_t_35_0hm;
p_t_35_0h ~ p_t_35_0hml;
p_t_35_0m -> p_t_35_0h * overlap_p_t_35_0;
p_t_35_0l / p_t_35_0m -> - ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml) / (1 + ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml));
(p_t_35_0hm - p_t_35_0hml) / p_t_35_0hml -> - (p_t_35_0l / p_t_35_0m) * (1 / (1 / overlap_p_t_35_0 + 1 + (p_t_35_0l / p_t_35_0m)));
p_t_35_0ml -> p_t_35_0hml / ((1 + ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml)) / overlap_p_t_35_0 + 1);
(p_t_35_0h - p_t_35_0hm) / p_t_35_0hm -> - 1 / (1 / overlap_p_t_35_0 + 1);
p_t_35_0h -> p_t_35_0hml / (overlap_p_t_35_0 / (1 + ((p_t_35_0m - p_t_35_0ml) / p_t_35_0ml)) + 1);
p_t_36_0hm ~ p_t_36_0hml;
p_t_36_0h ~ p_t_36_0hm;
p_t_36_0h ~ p_t_36_0hml;
p_t_36_0m -> p_t_36_0h * overlap_p_t_36_0;
p_t_36_0l / p_t_36_0m -> - ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml) / (1 + ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml));
(p_t_36_0hm - p_t_36_0hml) / p_t_36_0hml -> - (p_t_36_0l / p_t_36_0m) * (1 / (1 / overlap_p_t_36_0 + 1 + (p_t_36_0l / p_t_36_0m)));
p_t_36_0ml -> p_t_36_0hml / ((1 + ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml)) / overlap_p_t_36_0 + 1);
(p_t_36_0h - p_t_36_0hm) / p_t_36_0hm -> - 1 / (1 / overlap_p_t_36_0 + 1);
p_t_36_0h -> p_t_36_0hml / (overlap_p_t_36_0 / (1 + ((p_t_36_0m - p_t_36_0ml) / p_t_36_0ml)) + 1);
p_t_37_0hm ~ p_t_37_0hml;
p_t_37_0h ~ p_t_37_0hm;
p_t_37_0h ~ p_t_37_0hml;
p_t_37_0m -> p_t_37_0h * overlap_p_t_37_0;
p_t_37_0l / p_t_37_0m -> - ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml) / (1 + ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml));
(p_t_37_0hm - p_t_37_0hml) / p_t_37_0hml -> - (p_t_37_0l / p_t_37_0m) * (1 / (1 / overlap_p_t_37_0 + 1 + (p_t_37_0l / p_t_37_0m)));
p_t_37_0ml -> p_t_37_0hml / ((1 + ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml)) / overlap_p_t_37_0 + 1);
(p_t_37_0h - p_t_37_0hm) / p_t_37_0hm -> - 1 / (1 / overlap_p_t_37_0 + 1);
p_t_37_0h -> p_t_37_0hml / (overlap_p_t_37_0 / (1 + ((p_t_37_0m - p_t_37_0ml) / p_t_37_0ml)) + 1);
p_t_38_0hm ~ p_t_38_0hml;
p_t_38_0h ~ p_t_38_0hm;
p_t_38_0h ~ p_t_38_0hml;
p_t_38_0m -> p_t_38_0h * overlap_p_t_38_0;
p_t_38_0l / p_t_38_0m -> - ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml) / (1 + ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml));
(p_t_38_0hm - p_t_38_0hml) / p_t_38_0hml -> - (p_t_38_0l / p_t_38_0m) * (1 / (1 / overlap_p_t_38_0 + 1 + (p_t_38_0l / p_t_38_0m)));
p_t_38_0ml -> p_t_38_0hml / ((1 + ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml)) / overlap_p_t_38_0 + 1);
(p_t_38_0h - p_t_38_0hm) / p_t_38_0hm -> - 1 / (1 / overlap_p_t_38_0 + 1);
p_t_38_0h -> p_t_38_0hml / (overlap_p_t_38_0 / (1 + ((p_t_38_0m - p_t_38_0ml) / p_t_38_0ml)) + 1);
p_t_39_0hm ~ p_t_39_0hml;
p_t_39_0h ~ p_t_39_0hm;
p_t_39_0h ~ p_t_39_0hml;
p_t_39_0m -> p_t_39_0h * overlap_p_t_39_0;
p_t_39_0l / p_t_39_0m -> - ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml) / (1 + ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml));
(p_t_39_0hm - p_t_39_0hml) / p_t_39_0hml -> - (p_t_39_0l / p_t_39_0m) * (1 / (1 / overlap_p_t_39_0 + 1 + (p_t_39_0l / p_t_39_0m)));
p_t_39_0ml -> p_t_39_0hml / ((1 + ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml)) / overlap_p_t_39_0 + 1);
(p_t_39_0h - p_t_39_0hm) / p_t_39_0hm -> - 1 / (1 / overlap_p_t_39_0 + 1);
p_t_39_0h -> p_t_39_0hml / (overlap_p_t_39_0 / (1 + ((p_t_39_0m - p_t_39_0ml) / p_t_39_0ml)) + 1);
p_reshm ~ p_reshml;
p_resh ~ p_reshm;
p_resh ~ p_reshml;
p_resm -> p_resh * overlap_p_res;
p_resl / p_resm -> - ((p_resm - p_resml) / p_resml) / (1 + ((p_resm - p_resml) / p_resml));
(p_reshm - p_reshml) / p_reshml -> - (p_resl / p_resm) * (1 / (1 / overlap_p_res + 1 + (p_resl / p_resm)));
p_resml -> p_reshml / ((1 + ((p_resm - p_resml) / p_resml)) / overlap_p_res + 1);
(p_resh - p_reshm) / p_reshm -> - 1 / (1 / overlap_p_res + 1);
p_resh -> p_reshml / (overlap_p_res / (1 + ((p_resm - p_resml) / p_resml)) + 1);

# Meta-Hints for Horner scheme
p_t_1_0h ~ Mp_t_1_0;
p_t_2_0h ~ Mp_t_2_0;
p_t_3_0h ~ Mp_t_3_0;
p_t_4_0h ~ Mp_t_4_0;
p_t_5_0h ~ Mp_t_5_0;
p_t_6_0h ~ Mp_t_6_0;
p_t_7_0h ~ Mp_t_7_0;
p_t_8_0h ~ Mp_t_8_0;
p_t_9_0h ~ Mp_t_9_0;
p_t_10_0h ~ Mp_t_10_0;
p_t_11_0h ~ Mp_t_11_0;
p_t_12_0h ~ Mp_t_12_0;
p_t_13_0h ~ Mp_t_13_0;
p_t_14_0h ~ Mp_t_14_0;
p_t_15_0h ~ Mp_t_15_0;
p_t_16_0h ~ Mp_t_16_0;
p_t_17_0hm ~ Mp_t_17_0;
p_t_18_0hm ~ Mp_t_18_0;
p_t_19_0hm ~ Mp_t_19_0;
p_t_20_0hm ~ Mp_t_20_0;
p_t_21_0hm ~ Mp_t_21_0;
p_t_22_0hm ~ Mp_t_22_0;
p_t_23_0hm ~ Mp_t_23_0;
p_t_24_0hm ~ Mp_t_24_0;
p_t_25_0hm ~ Mp_t_25_0;
p_t_26_0hm ~ Mp_t_26_0;
p_t_27_0hm ~ Mp_t_27_0;
p_t_28_0hm ~ Mp_t_28_0;
p_t_29_0hm ~ Mp_t_29_0;
p_t_30_0hm ~ Mp_t_30_0;
p_t_31_0hm ~ Mp_t_31_0;
p_t_32_0hm ~ Mp_t_32_0;
p_t_33_0hm ~ Mp_t_33_0;
p_t_34_0hm ~ Mp_t_34_0;
p_t_35_0hml ~ Mp_t_35_0;
p_t_36_0hml ~ Mp_t_36_0;
p_t_37_0hml ~ Mp_t_37_0;
p_t_38_0hml ~ Mp_t_38_0;
p_t_39_0hml ~ Mp_t_39_0;
p_reshml ~ Mp_res;

# Dichotomies for triple-double decomposition
$ p_t_35_0hml in (0);
$ p_t_35_0ml in (0);
$ p_t_36_0hml in (0);
$ p_t_36_0ml in (0);
$ p_t_37_0hml in (0);
$ p_t_37_0ml in (0);
$ p_t_38_0hml in (0);
$ p_t_38_0ml in (0);
$ p_t_39_0hml in (0);
$ p_t_39_0ml in (0);
$ p_reshml in (0);
$ p_resml in (0);

# Dichotomy for the error bound
epsilon $ xhml;

