# The polynomial to implement is: 31303540725427994415236316926498277b-115 + (x * (55627180908427023057028403875349b-105 + (x * (3973482098975897b-52 + (x * (7048617650465021b-52 + (x * (6914118691349309b-51 + (x * (3859522469193581b-49 + (x * (4591567794769115b-48 + (x * (357643827686125b-43 + (x * (3685198568657065b-45 + (x * (4866801803033539b-44 + (x * (1638677454183417b-41 + (x * (4544581697576865b-41 + (x * 6325975157511843b-40)))))))))))))))))))))))
# The polynomial implemented is: 31303540725427994415236316926498277b-115 + (x * (55627180908427023057028403875349b-105 + (x * (3973482098975897b-52 + (x * (7048617650465021b-52 + (x * (6914118691349309b-51 + (x * (3859522469193581b-49 + (x * (4591567794769115b-48 + (x * (357643827686125b-43 + (x * (3685198568657065b-45 + (x * (4866801803033539b-44 + (x * (1638677454183417b-41 + (x * (4544581697576865b-41 + (x * 6325975157511843b-40)))))))))))))))))))))))
# The domain is [-205674681606191b-53;205674681606835b-53]
# The free variable x is a double precision number, the result p_res* is stored on a double-double number.
# The code produces 37 intermediate and final arithmetical approximations.

# Double precision rounding operator:
@double = float<ieee_64,ne>;

# Disable some annoying warnings:
#@-Wno-dichotomy-failure

# Helper definitions for decomposing the free variable
xh = x;

# Transcription of the C code
p_coeff_0h = double(7.53605330605588874526290510402759537100791931152343750000000000000000000000000000e-01);
p_coeff_0m = double(-6.81399026788433814240085924387948818667013384621768622671778015131849315366707742e-20);
p_coeff_0hm = p_coeff_0h + p_coeff_0m;

p_coeff_1h = double(1.37131588394733516800272354885237291455268859863281250000000000000000000000000000e+00);
p_coeff_1m = double(5.75522635997281408409017033924079017806689197384387157718776961701223626732826233e-17);
p_coeff_1hm = p_coeff_1h + p_coeff_1m;

p_coeff_2h = double(8.82290262843787198576706032326910644769668579101562500000000000000000000000000000e-01);

p_coeff_3h = double(1.56510752146510800919543271447764709591865539550781250000000000000000000000000000e+00);

p_coeff_4h = double(3.07048550645086359978108703217003494501113891601562500000000000000000000000000000e+00);

p_coeff_5h = double(6.85588913497096008597964100772514939308166503906250000000000000000000000000000000e+00);

p_coeff_6h = double(1.63125257116160859993669873801991343498229980468750000000000000000000000000000000e+01);

p_coeff_7h = double(4.06593958002900990322814323008060455322265625000000000000000000000000000000000000e+01);

p_coeff_8h = double(1.04739642911711854367240448482334613800048828125000000000000000000000000000000000e+02);

p_coeff_9h = double(2.76645653402371124229830456897616386413574218750000000000000000000000000000000000e+02);

p_coeff_10h = double(7.45184231247284060373203828930854797363281250000000000000000000000000000000000000e+02);

p_coeff_11h = double(2.06663648786018939063069410622119903564453125000000000000000000000000000000000000e+03);

p_coeff_12h = double(5.75344088930418638483388349413871765136718750000000000000000000000000000000000000e+03);

p_t_1_0h = p_coeff_12h;

p_t_2_0h = double(p_t_1_0h * xh);
p_t_3_0h = double(p_coeff_11h + p_t_2_0h);
p_t_4_0h = double(p_t_3_0h * xh);
p_t_5_0h = double(p_coeff_10h + p_t_4_0h);
p_t_6_0h = double(p_t_5_0h * xh);
p_t_7_0h = double(p_coeff_9h + p_t_6_0h);
p_t_8_0h = double(p_t_7_0h * xh);
p_t_9_0h = double(p_coeff_8h + p_t_8_0h);
p_t_10_0h = double(p_t_9_0h * xh);
p_t_11_0h = double(p_coeff_7h + p_t_10_0h);
p_t_12_0h = double(p_t_11_0h * xh);
p_t_13_0h = double(p_coeff_6h + p_t_12_0h);
p_t_14_0h = double(p_t_13_0h * xh);
p_t_15_0h = double(p_coeff_5h + p_t_14_0h);
p_t_16_0h = double(p_t_15_0h * xh);
p_t_17_0h = double(p_coeff_4h + p_t_16_0h);
p_t_18_0h = double(p_t_17_0h * xh);
p_t_19_0h = double(p_coeff_3h + p_t_18_0h);
p_t_20_0h = double(p_t_19_0h * xh);
p_t_21_0hm = p_coeff_2h + p_t_20_0h;
p_t_21_0h = double(p_t_21_0hm);
p_t_21_0m = p_t_21_0hm - p_t_21_0h;

p_t_22_0hm = fma_rel<100>(p_t_21_0hm,xh,p_coeff_1hm);
p_t_22_0h = double(p_t_22_0hm);
p_t_22_0m = p_t_22_0hm - p_t_22_0h;

p_t_23_0hm = fma_rel<100>(p_t_22_0hm,xh,p_coeff_0hm);
p_t_23_0h = double(p_t_23_0hm);
p_t_23_0m = p_t_23_0hm - p_t_23_0h;

p_reshm = p_t_23_0hm;
p_resh = p_t_23_0h;
p_resm = p_t_23_0m;


# Mathematical equivalents
Mx = x;
Mp_coeff_0 = p_coeff_0hm;
Mp_coeff_1 = p_coeff_1hm;
Mp_coeff_2 = p_coeff_2h;
Mp_coeff_3 = p_coeff_3h;
Mp_coeff_4 = p_coeff_4h;
Mp_coeff_5 = p_coeff_5h;
Mp_coeff_6 = p_coeff_6h;
Mp_coeff_7 = p_coeff_7h;
Mp_coeff_8 = p_coeff_8h;
Mp_coeff_9 = p_coeff_9h;
Mp_coeff_10 = p_coeff_10h;
Mp_coeff_11 = p_coeff_11h;
Mp_coeff_12 = p_coeff_12h;
Mp_t_1_0 = Mp_coeff_12;
Mp_t_2_0 = Mp_t_1_0 * Mx;
Mp_t_3_0 = Mp_coeff_11 + Mp_t_2_0;
Mp_t_4_0 = Mp_t_3_0 * Mx;
Mp_t_5_0 = Mp_coeff_10 + Mp_t_4_0;
Mp_t_6_0 = Mp_t_5_0 * Mx;
Mp_t_7_0 = Mp_coeff_9 + Mp_t_6_0;
Mp_t_8_0 = Mp_t_7_0 * Mx;
Mp_t_9_0 = Mp_coeff_8 + Mp_t_8_0;
Mp_t_10_0 = Mp_t_9_0 * Mx;
Mp_t_11_0 = Mp_coeff_7 + Mp_t_10_0;
Mp_t_12_0 = Mp_t_11_0 * Mx;
Mp_t_13_0 = Mp_coeff_6 + Mp_t_12_0;
Mp_t_14_0 = Mp_t_13_0 * Mx;
Mp_t_15_0 = Mp_coeff_5 + Mp_t_14_0;
Mp_t_16_0 = Mp_t_15_0 * Mx;
Mp_t_17_0 = Mp_coeff_4 + Mp_t_16_0;
Mp_t_18_0 = Mp_t_17_0 * Mx;
Mp_t_19_0 = Mp_coeff_3 + Mp_t_18_0;
Mp_t_20_0 = Mp_t_19_0 * Mx;
Mp_t_21_0 = Mp_coeff_2 + Mp_t_20_0;
Mp_t_22_0 = (Mp_t_21_0 * Mx) + Mp_coeff_1;
Mp_t_23_0 = (Mp_t_22_0 * Mx) + Mp_coeff_0;
Mp_res = Mp_t_23_0;

# Definition of the relative arithmetical error
epsilon = (p_reshm - Mp_res) / Mp_res;

# Implication to prove
{((
   x in [-205674681606191b-53,-205674681606191b-453]
) \/ (
   x in [205674681606835b-453,205674681606835b-53]
))
->
(
   epsilon in ?
)}

# Hints and Meta-Hints for expansion decomposition

p_t_21_0h ~ p_t_21_0hm;
p_t_22_0h ~ p_t_22_0hm;
p_t_23_0h ~ p_t_23_0hm;

# Meta-Hints for Horner scheme
p_t_1_0h ~ Mp_t_1_0;
p_t_2_0h ~ Mp_t_2_0;
p_t_3_0h ~ Mp_t_3_0;
p_t_4_0h ~ Mp_t_4_0;
p_t_5_0h ~ Mp_t_5_0;
p_t_6_0h ~ Mp_t_6_0;
p_t_7_0h ~ Mp_t_7_0;
p_t_8_0h ~ Mp_t_8_0;
p_t_9_0h ~ Mp_t_9_0;
p_t_10_0h ~ Mp_t_10_0;
p_t_11_0h ~ Mp_t_11_0;
p_t_12_0h ~ Mp_t_12_0;
p_t_13_0h ~ Mp_t_13_0;
p_t_14_0h ~ Mp_t_14_0;
p_t_15_0h ~ Mp_t_15_0;
p_t_16_0h ~ Mp_t_16_0;
p_t_17_0h ~ Mp_t_17_0;
p_t_18_0h ~ Mp_t_18_0;
p_t_19_0h ~ Mp_t_19_0;
p_t_20_0h ~ Mp_t_20_0;
p_t_21_0hm ~ Mp_t_21_0;
p_t_22_0hm ~ Mp_t_22_0;
p_t_23_0hm ~ Mp_t_23_0;
p_reshm ~ Mp_res;

# Dichotomies for triple-double decomposition

# Dichotomy for the error bound
epsilon $ xhm;

