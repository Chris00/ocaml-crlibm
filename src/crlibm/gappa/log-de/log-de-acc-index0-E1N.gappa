# Usage: This files builds an error computation for one index value
#only. To get a complete proof you need to run it through gappa for all
#the possible values of the constants.

# Running the ../maple/log-de.mpl Maple script
# should create the required sed files and give the command to run.
# Example   sed  -f ../maple/TEMPLOG/polynomials.sed  -f ../maple/TEMPLOG/log-de_1.sed ../gappa/log-de-accurate.gappa | ~/gappa/src/gappa 

#  Remove the following line when editing this file, to get back the warnings (all the current ones are harmless)
#@ -Wno-hint-difference -Wno-null-denominator
# Remark: asking for  warnings resuires at least 512MB of memory

#This is to prevent another warning which might let you think Gappa failed when it eventually succeeds. 
#@ -Wno-dichotomy-failure

# Rounding operators and sequences definition
@IEEEdouble = float<ieee_64,ne>;
@IEEEext = float<x86_80,ne>;
@Add22ext = add_rel<124>;
@Mul22ext = mul_rel<124>;


# This is to tell Gappa that E is an integer.
E=int<ne>(dummyE);

# polynomial coefficients, computed by Maple
c14 = IEEEext(_c14h);
c13 = IEEEext(_c13h);
c12 = IEEEext(_c12h);
c11 = IEEEext(_c11h);
c10 = IEEEext(_c10h);
c9 = IEEEext(_c9h);
c8 = IEEEext(_c8h);

c7h = IEEEext(_c7h);
c7l = IEEEext(_c7l);
c7=c7h+c7l;

c6h = IEEEext(_c6h);
c6l = IEEEext(_c6l);
c6=c6h+c6l;

c5h = IEEEext(_c5h);
c5l = IEEEext(_c5l);
c5=c5h+c5l;

c4h = IEEEext(_c4h);
c4l = IEEEext(_c4l);
c4=c4h+c4l;

c3h = IEEEext(_c3h);
c3l = IEEEext(_c3l);
c3=c3h+c3l;

c2h = IEEEext(_c2h);
c2l = IEEEext(_c2l);
c2=c2h+c2l;

c1h = IEEEext(_c1h);
c1l = IEEEext(_c1l);
c1=c1h+c1l;

log2h = IEEEext(_log2h);
log2l  = IEEEext(_log2l);
log2=log2h+log2l;
logirh = IEEEext(_logirh);
logirl = IEEEext(_logirl);
logir=logirh+logirl;
   
# Transcription of C code

t13 IEEEext= c13 + z*c14;
t12 IEEEext= c12 + z*t13;
t11 IEEEext= c11 + z*t12;
t10 IEEEext= c10 + z*t11;
t9  IEEEext= c9  + z*t10;
t8  IEEEext= c8  + z*t9;

#Mul12ext(&p7h, &p7l,   z, t8);
p7=z*t8;
#Add22ext(&t7h, &t7l,   p7h,p7l, c7h,c7l);
t7=Add22ext(c7,p7);

#FMA22ext(&t6h, &t6l,   z,0,   t7h,t7l,    c6h,c6l);
p6=Mul22ext(z,t7);
t6=Add22ext(c6,p6);

#FMA22ext(&t5h, &t5l,   z,0,   t6h,t6l,    c5h,c5l);
p5=Mul22ext(z,t6);
t5=Add22ext(c5,p5);

#FMA22ext(&t4h, &t4l,   z,0,   t5h,t5l,    c4h,c4l);
p4=Mul22ext(z,t5);
t4=Add22ext(c4,p4);

#FMA22ext(&t3h, &t3l,   z,0,   t4h,t4l,    c3h,c3l);
p3=Mul22ext(z,t4);
t3=Add22ext(c3,p3);

#FMA22ext(&t2h, &t2l,   z,0,   t3h,t3l,    c2h,c2l);
p2=Mul22ext(z,t3);
t2=Add22ext(c2,p2);

#FMA22ext(&t1h, &t1l,   z,0,   t2h,t2l,    c1h,c1l);
p1=Mul22ext(z,t2);
t1=Add22ext(c1,p1);

#FMA22ext(&t0h, &t0l,   z,0,   t1h,t1l,    argredtable[index].logirh, argredtable[index].logirl);
p0=Mul22ext(z,t1);
# Addition of 0 is exact
t0=logir+p0;

#Mul22ext(&eh, &el,   log2h,log2l, E, 0);
e=Mul22ext(log2,E);

#Add22ext(prh, prl,   eh,el,  t0h,t0l);
logz=Add22ext(e,t0);

#---------- What this code is supposed to approximate
# Exact mathematical definition of the log
Mlogz =  E*Mlog2 + (Mlogir + Log1pz);

PolyLog1pz = z*(c1+z*(c2+z*(c3+z*(c4+z*(c5+z*(c6+z*(c7+z*(c8+z*(c9+z*(c10+z*(c11+z*(c12+z*(c13+z*c14)))))))))))));

epsilon = (logz - Mlogz)/Mlogz;

# Auxiliary epsilons
Alogz = e + (logir+p0); # exact, before approximating by the Add22
eps1 = (Alogz - Mlogz)/Mlogz;
eps2 = (logz - Alogz)/Alogz;

epspoly=(p0-Log1pz)/Log1pz;
epsolyRound=(p0-PolyLog1pz)/PolyLog1pz;
epspolyApprox=(PolyLog1pz - Log1pz)/Log1pz;

{
   |E| in [1,1024]
/\    |z| in [1b-200, _zabsmax] 
/\  log2 - Mlog2    in [-1b-129, 1b-129] 
/\  logir - Mlogir in [-1b-129, 1b-129]  
/\  (PolyLog1pz - Log1pz)/Log1pz in [-_epsilonApproxAccurate, _epsilonApproxAccurate]
/\  (PolyLog1pz - Log1pz) in [-_deltaApproxAccurate, _deltaApproxAccurate]
->
epsilon in [-1b-119,1b-119]
}

epspoly -> epsolyRound + epspolyApprox + epsolyRound*epspolyApprox; 

Log1pz  ->  PolyLog1pz - (PolyLog1pz-Log1pz);

#(Alogz2-Mlogz)/Mlogz -> ( (e + (logir +p0)) - (E*Mlog2 + (Mlogir + Log1pz)) ) / Mlogz;
(Alogz-Mlogz)/Mlogz -> ( (e - Mlog2*E) + (logir-Mlogir) + Log1pz*((p0 - Log1pz)/Log1pz) )  / Mlogz;

Mlog2 -> log2 - (log2-Mlog2);
Mlogir -> logir - (logir - Mlogir);

e-E*Mlog2 -> (e-E*log2) + (E*(log2-Mlog2)) ; 

epsilon-> eps1 + eps2 + eps1*eps2;

epsilon $ E; 