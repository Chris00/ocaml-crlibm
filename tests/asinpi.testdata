asinpi     # Name of the function to test

# asinpi.testdata
# copyright (C) 2007  F. de Dinechin, Ch. Q. Lauter and V. Lefevre
# This file is part of crlibm and is distributed under the GNU Public Licence
# See file COPYING for details

# The following lines are either comments (beginning with a #)
# or give 
#   1/ a rounding mode : RN|RU|RD|RZ (crlibm syntax) or  N|P|M|Z (libmcr syntax)
#   2/ The high and low hexadecimal halves of an input
#   3/ The high and low hexadecimal halves of the expected corresponding output




# Special cases
N 00000000 00000000 00000000 00000000 # zero
N 80000000 00000000 80000000 00000000 # -zero
P 00000000 00000000 00000000 00000000 # zero
P 80000000 00000000 80000000 00000000 # -zero
M 00000000 00000000 00000000 00000000 # zero
M 80000000 00000000 80000000 00000000 # -zero
Z 00000000 00000000 00000000 00000000 # zero
Z 80000000 00000000 80000000 00000000 # -zero

N 00000000 00000001 00000000 00000000 # smallest denorm positive
N 80000000 00000001 80000000 00000000 # smallest denorm negative
P 00000000 00000001 00000000 00000001 # smallest denorm positive
P 80000000 00000001 80000000 00000000 # smallest denorm negative
M 00000000 00000001 00000000 00000000 # smallest denorm positive
M 80000000 00000001 80000000 00000001 # smallest denorm negative
Z 00000000 00000001 00000000 00000000 # smallest denorm positive
Z 80000000 00000001 80000000 00000000 # smallest denorm negative


N 7ff00000 00000000 7ff80000 00000000 # +inf
N fff00000 00000000 7ff80000 00000000 # -inf
P 7ff00000 00000000 7ff80000 00000000 # +inf 
P fff00000 00000000 7ff80000 00000000 # -inf
M 7ff00000 00000000 7ff80000 00000000 # +inf
M fff00000 00000000 7ff80000 00000000 # -inf
Z 7ff00000 00000000 7ff80000 00000000 # +inf
Z fff00000 00000000 7ff80000 00000000 # -inf

N fff80000 00000000 fff80000 00000000 # NaN
P fff80000 00000000 fff80000 00000000 # NaN
M fff80000 00000000 fff80000 00000000 # NaN
Z fff80000 00000000 fff80000 00000000 # NaN


# More cases TODO


# Bad cases generated by tests/crlibm_generate_test_vectors asinpi 15 10 
#TODO

# One in five of the very worst cases computed by Lefevre and Muller.
# Rounding these values requires evaluating the function to at least 2^(-100).
# These worst cases have been selected thanks to the filterlists 5 script
# If you want the full list please contact Jean-Michel Muller
Z 0x3F79281A 0xD82D0432  0x3F6003EC 0x8286A4FB    # 6.141762600976584732248575448921e-03
N 0x3F7B15D2 0x541926F1  0x3F613E3D 0x76F2A882    # 6.612607570397819635454883524517e-03
N 0x3F1592C0 0x29EDB176  0x3EFB77C8 0xD62F87CD    # 8.229539751675681350483182452393e-05
Z 0x3F04125C 0xD4518EB2  0x3EE98E5D 0xD17E1E20    # 3.828378479722500829594139526435e-05
Z 0x3EEF374F 0x82DF5845  0x3ED3DF6D 0x23EBC740    # 1.488497590777457833604528053550e-05
N 0x3EF64CEC 0x00145320  0x3EDC64D3 0x392C57CE    # 2.126739128012749158874727939406e-05
N 0x3EE1F109 0x39BC26EB  0x3EC6D808 0xFD2B311B    # 8.555196294962821669852735817496e-06
Z 0x3EC73FED 0x8FC16061  0x3EAD9A3A 0xE588D66D    # 2.771582442700384343940408007900e-06
Z 0x3E6E8085 0xF1CF90AF  0x3E536B0F 0x6E36A406    # 5.681448398529037007585303846284e-08
Z 0x3E77CAD1 0x70307F7E  0x3E5E4B12 0x0B7CD0CC    # 8.863306892635711173781913867903e-08
N 0x3E783ED1 0x4CAC5F27  0x3E5EDEC3 0xFD60534E    # 9.032108320668517310416317572450e-08
N 0x3E568BCB 0xC4538A8F  0x3E3CB4E0 0xFD5E1D19    # 2.099767139753422253461034201801e-08
Z 0x3E3BB2E2 0x254EC57B  0x3E21A232 0x520B30B7    # 6.449120866609825597723646876209e-09
N 0x3E1A9AEE 0x69418F0C  0x3E00EFF9 0x393E91DF    # 1.548626481412716013637535810874e-09
Z 0x3E0BDAB9 0x96F17114  0x3DF1BB8F 0x7CF6126F    # 8.106695713035386254996482593505e-10
Z 0x3E16D0B8 0x88CCFA4A  0x3DFD0CA3 0x0163B96F    # 1.328026164040451248570454050404e-09
Z 0x3DFD75F3 0xADFD53B6  0x3DE2C15B 0x0E2BECE3    # 4.287103293802359423883002578542e-10
N 0x3FEB32B7 0xAC93DDEF  0x3FD4B1F8 0xF1020745    # 8.499410982757903409989808096725e-01
N 0x3DAF967C 0x514AA749  0x3D941C04 0x41FA3EBE    # 1.436448402964815131796131435811e-11
N 0x3D6E0F15 0xAE3D5120  0x3D5322D7 0xD3050B0B    # 8.543260199205336516154183688793e-13
N 0x3FDCA13A 0xDE89ABDF  0x3FC2E580 0x91498076    # 4.473406956882949869758192562585e-01
Z 0x3D4F067F 0x55743EA4  0x3D33C059 0xD39F1D61    # 2.204485870981263629787267659738e-13
N 0x3D0B85DE 0x83D5D0A1  0x3CF1858A 0x2638562D    # 1.222263470842000579322446625559e-14
Z 0x3CF965FF 0x593FB7DC  0x3CE02B4C 0xD5FB638B    # 5.639583813468156889257708286064e-15
Z 0x3D018F2D 0x9E782316  0x3CE65B70 0x4AF8CA16    # 7.797891151023816791208394668943e-15
Z 0x3CB5CBA8 0x9AF1F855  0x3C9BC03D 0xF34E902B    # 3.024738995662778650786064295606e-16
N 0x3C959AF9 0xA1194EFE  0x3C7B8241 0x98B94A89    # 7.495869043776588887696029299568e-17
Z 0x3FBDB8A7 0x9A80C3A0  0x3FA2F6C4 0xA60085CC    # 1.160988571362069343706480140099e-01
N 0x3FC539F5 0x8C55C6F0  0x3FAB26D7 0x6F0AA0DB    # 1.658312735776727997460966435028e-01
Z 0x3F8E44E4 0xA248523A  0x3F734547 0x36D795B9    # 1.477984066244985086879815128214e-02
